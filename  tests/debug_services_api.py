#!/usr/bin/env python3
"""
–û—Ç–ª–∞–¥–∫–∞ YClients API –¥–ª—è —É—Å–ª—É–≥
"""

import asyncio
import json
import logging
import os
from dotenv import load_dotenv
import aiohttp

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

async def debug_services_endpoints():
    """–û—Ç–ª–∞–¥–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö endpoints –¥–ª—è —É—Å–ª—É–≥"""
    
    token = os.getenv("YCLIENTS_TOKEN")
    company_id = os.getenv("YCLIENTS_COMPANY_ID")
    login = os.getenv("YCLIENTS_LOGIN")
    password = os.getenv("YCLIENTS_PASSWORD")
    
    if not all([token, company_id]):
        logger.error(" YClients –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        return
    
    base_url = "https://api.yclients.com/api/v1"
    headers = {
        'Accept': 'application/vnd.yclients.v2+json',
        'Authorization': f'Bearer {token}',
        'Content-Type': 'application/json'
    }
    
    # –ü–æ–ª—É—á–∞–µ–º user token
    user_token = None
    if login and password:
        import requests
        try:
            response = requests.post(f"{base_url}/auth", headers=headers, json={
                "login": login,
                "password": password
            })
            result = response.json()
            if result.get('success') and result.get('data', {}).get('user_token'):
                user_token = result['data']['user_token']
                headers['Authorization'] = f'Bearer {token}, User {user_token}'
                logger.info("‚úÖ User token –ø–æ–ª—É—á–µ–Ω")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å user token: {e}")
    
    async with aiohttp.ClientSession() as session:
        
        # 1. –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ª—É–≥
        logger.info("üîç 1. –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ª—É–≥...")
        try:
            url = f"{base_url}/service_categories/{company_id}"
            async with session.get(url, headers=headers) as response:
                result = await response.json()
                logger.info(f"üì• –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ ({response.status}): {json.dumps(result, indent=2, ensure_ascii=False)}")
        except Exception as e:
            logger.error(f" –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}")
        
        # 2. –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é —É—Å–ª—É–≥
        logger.info("\nüîç 2. –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é —É—Å–ª—É–≥...")
        try:
            url = f"{base_url}/service_categories/{company_id}"
            category_data = {
                "title": "–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —É—Å–ª—É–≥–∏",
                "weight": 1
            }
            async with session.post(url, headers=headers, json=category_data) as response:
                result = await response.json()
                logger.info(f"üì• –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ({response.status}): {json.dumps(result, indent=2, ensure_ascii=False)}")
        except Exception as e:
            logger.error(f" –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
        
        # 3. –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ endpoints –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É—Å–ª—É–≥
        service_data = {
            "title": "–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è",
            "category_id": 0,
            "price_min": 1500,
            "price_max": 1500,
            "duration": 30,
            "description": "–¢–µ—Å—Ç–æ–≤–∞—è —É—Å–ª—É–≥–∞",
            "active": 1
        }
        
        endpoints_to_try = [
            f"services/{company_id}",
            f"service/{company_id}",
            f"company/{company_id}/services",
            f"company/{company_id}/service"
        ]
        
        for endpoint in endpoints_to_try:
            logger.info(f"\nüîç 3. –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —É—Å–ª—É–≥—É —á–µ—Ä–µ–∑: {endpoint}")
            try:
                url = f"{base_url}/{endpoint}"
                async with session.post(url, headers=headers, json=service_data) as response:
                    result = await response.json()
                    logger.info(f"üì• –°–æ–∑–¥–∞–Ω–∏–µ —É—Å–ª—É–≥–∏ ({response.status}): {json.dumps(result, indent=2, ensure_ascii=False)}")
                    if response.status == 200 or response.status == 201:
                        logger.info(f"–£—Å–ø–µ—à–Ω–æ! –ò—Å–ø–æ–ª—å–∑—É–µ–º endpoint: {endpoint}")
                        break
            except Exception as e:
                logger.error(f" –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É—Å–ª—É–≥–∏ —á–µ—Ä–µ–∑ {endpoint}: {e}")
        
        # 4. –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–ø–∞–Ω–∏–∏
        logger.info(f"\nüîç 4. –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–ø–∞–Ω–∏–∏...")
        try:
            url = f"{base_url}/company/{company_id}"
            async with session.get(url, headers=headers) as response:
                result = await response.json()
                logger.info(f"üì• –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏ ({response.status}): {json.dumps(result, indent=2, ensure_ascii=False)}")
        except Exception as e:
            logger.error(f" –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–ø–∞–Ω–∏–∏: {e}")

if __name__ == "__main__":
    asyncio.run(debug_services_endpoints())
