#!/usr/bin/env python3
"""
–¢–µ—Å—Ç YClients –∞–¥–∞–ø—Ç–µ—Ä–∞
"""

import asyncio
import json
import logging
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à –∫–ª–∞—Å—Å –∏–∑ dental_bot.py
import sys
sys.path.append('..')

from dental_bot import YClientsIntegration

async def test_adapter():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ –º–µ—Ç–æ–¥—ã –∞–¥–∞–ø—Ç–µ—Ä–∞"""
    
    logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ YClients –∞–¥–∞–ø—Ç–µ—Ä–∞...")
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–¥–∞–ø—Ç–µ—Ä
        adapter = YClientsIntegration()
        
        # 1. –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —É—Å–ª—É–≥
        logger.info("\nüìã 1. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —É—Å–ª—É–≥...")
        services = await adapter.get_services()
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —É—Å–ª—É–≥: {len(services.get('services', []))}")
        if services.get('services'):
            for i, service in enumerate(services['services'][:3]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                logger.info(f"   {i+1}. {service['name']} ({service['price_from']}-{service['price_to']}‚ÇΩ)")
        
        # 2. –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–∞—á–µ–π
        logger.info("\nüë®‚Äç‚öïÔ∏è 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–∞—á–µ–π...")
        doctors = await adapter.get_doctors()
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –≤—Ä–∞—á–µ–π: {len(doctors.get('doctors', []))}")
        if doctors.get('doctors'):
            for i, doctor in enumerate(doctors['doctors'][:3]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã—Ö 3
                logger.info(f"   {i+1}. {doctor['name']} ({doctor['specialization']})")
        
        # 3. –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–∞—á–µ–π –ø–æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        logger.info("\nüîç 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –≤—Ä–∞—á–µ–π –ø–æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ (–æ—Ä—Ç–æ–¥–æ–Ω—Ç)...")
        ortodont_doctors = await adapter.get_doctors("–æ—Ä—Ç–æ–¥–æ–Ω—Ç")
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ –æ—Ä—Ç–æ–¥–æ–Ω—Ç–æ–≤: {len(ortodont_doctors.get('doctors', []))}")
        
        # 4. –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ —Å–ª–æ—Ç–æ–≤
        logger.info("\nüìÖ 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤...")
        try:
            slots = await adapter.search_appointments("–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è", "–ú–æ—Ä–æ–∑–æ–≤", "2024-12-10")
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ —Å–ª–æ—Ç–æ–≤: {len(slots.get('appointments', []))}")
            if slots.get('appointments'):
                for i, slot in enumerate(slots['appointments'][:2]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 2
                    logger.info(f"   {i+1}. {slot['datetime']} - {slot['doctor']}")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ü–æ–∏—Å–∫ —Å–ª–æ—Ç–æ–≤: {e}")
        
        # 5. –¢–µ—Å—Ç –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–∏–µ–º
        logger.info("\nüìù 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–∏–µ–º...")
        try:
            booking = await adapter.book_appointment(
                patient_name="–¢–µ—Å—Ç–æ–≤—ã–π –ü–∞—Ü–∏–µ–Ω—Ç",
                phone="+79001234567", 
                service="–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∞",
                doctor="–ú–æ—Ä–æ–∑–æ–≤",
                datetime_str="2024-12-10 14:00",
                comment="–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å"
            )
            logger.info(f"–ó–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞: {booking.get('message', 'OK')}")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ó–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–∏–µ–º: {e}")
        
        logger.info("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        logger.error(f" –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

if __name__ == "__main__":
    asyncio.run(test_adapter())
