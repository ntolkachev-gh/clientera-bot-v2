#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ YClients API
"""

import asyncio
import json
import logging
import os
from dotenv import load_dotenv
import aiohttp

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

async def test_yclients_api():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ YClients API"""
    
    token = os.getenv("YCLIENTS_TOKEN")
    company_id = os.getenv("YCLIENTS_COMPANY_ID")
    
    if not all([token, company_id]):
        logger.error(" YClients –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env —Ñ–∞–π–ª")
        return
    
    base_url = "https://api.yclients.com/api/v1"
    headers = {
        'Accept': 'application/vnd.yclients.v2+json',
        'Authorization': f'Bearer {token}',
        'Content-Type': 'application/json'
    }
    
    logger.info(f"üîó –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ YClients API...")
    logger.info(f"üìã Company ID: {company_id}")
    logger.info(f"üîë Token: {token[:10]}...")
    
    async with aiohttp.ClientSession() as session:
        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
            logger.info("üë®‚Äç‚öïÔ∏è –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤...")
            url = f"{base_url}/staff/{company_id}"
            async with session.get(url, headers=headers) as response:
                staff_data = await response.json()
                logger.info(f"üì• –û—Ç–≤–µ—Ç API ({response.status}): {json.dumps(staff_data, indent=2, ensure_ascii=False)}")
                
                if staff_data.get('success') and staff_data.get('data'):
                    staff = staff_data['data']
                    logger.info(f"–ù–∞–π–¥–µ–Ω–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {len(staff)}")
                    for s in staff:
                        logger.info(f"  - {s.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} ({s.get('specialization', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')})")
                else:
                    logger.error(f" –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {staff_data}")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —É—Å–ª—É–≥
            logger.info("\nü¶∑ –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥...")
            url = f"{base_url}/services/{company_id}"
            async with session.get(url, headers=headers) as response:
                services_data = await response.json()
                logger.info(f"üì• –û—Ç–≤–µ—Ç API ({response.status}): {json.dumps(services_data, indent=2, ensure_ascii=False)}")
                
                if services_data.get('success') and services_data.get('data'):
                    services = services_data['data']
                    logger.info(f"–ù–∞–π–¥–µ–Ω–æ —É—Å–ª—É–≥: {len(services)}")
                    for s in services:
                        logger.info(f"  - {s.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} ({s.get('price_min', 0)}‚ÇΩ)")
                else:
                    logger.warning(f"‚ö†Ô∏è –£—Å–ª—É–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –æ—à–∏–±–∫–∞: {services_data}")
            
        except Exception as e:
            logger.error(f" –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {e}")

if __name__ == "__main__":
    asyncio.run(test_yclients_api())
