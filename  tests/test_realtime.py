#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –±–æ—Ç–∞ —Å OpenAI Realtime API –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.
"""

import asyncio
import json
import logging
import os
from dotenv import load_dotenv
import websockets
from aiogram import Bot, Dispatcher, F, Router
from aiogram.filters import CommandStart
from aiogram.types import Message

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä
router = Router()

class SimpleRealtimeClient:
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å OpenAI."""
    
    def __init__(self):
        self.api_key = os.getenv("OPENAI_API_KEY")
        self.ws_url = "wss://api.openai.com/v1/realtime?model=gpt-4o-realtime-preview"
        self.websocket = None
        self.is_connected = False
        
    async def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ OpenAI Realtime API."""
        try:
            logger.info("üîå –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ OpenAI Realtime API...")
            
            headers = {
                "Authorization": f"Bearer {self.api_key}",
                "OpenAI-Beta": "realtime=v1"
            }
            
            self.websocket = await websockets.connect(
                self.ws_url,
                extra_headers=headers,
                ping_interval=20,
                ping_timeout=10
            )
            
            self.is_connected = True
            logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ OpenAI Realtime API —É—Å–ø–µ—à–Ω–æ!")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é
            await self.initialize_session()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π
            asyncio.create_task(self.listen_events())
            
        except Exception as e:
            logger.error(f" –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ OpenAI: {e}")
            self.is_connected = False
            raise
    
    async def initialize_session(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏."""
        session_event = {
            "type": "session.update",
            "session": {
                "modalities": ["text"],
                "instructions": "–¢—ã - –ø–æ–º–æ—â–Ω–∏–∫ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –∫–ª–∏–Ω–∏–∫–∏. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É.",
                "voice": "alloy",
                "input_audio_format": "pcm16",
                "output_audio_format": "pcm16",
                "turn_detection": {
                    "type": "server_vad",
                    "threshold": 0.5,
                    "prefix_padding_ms": 300,
                    "silence_duration_ms": 200
                },
                "tools": [],
                "tool_choice": "auto",
                "temperature": 0.8
            }
        }
        
        await self.send_event(session_event)
        logger.info("üìã –°–µ—Å—Å–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    async def send_event(self, event):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è –≤ WebSocket."""
        if not self.websocket or self.websocket.closed:
            raise ConnectionError("WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
        
        json_data = json.dumps(event, ensure_ascii=False)
        await self.websocket.send(json_data)
        logger.debug(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {event.get('type', 'unknown')}")
        logger.debug(f"üì§ –î–∞–Ω–Ω—ã–µ: {json_data[:200]}...")
    
    async def listen_events(self):
        """–ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–±—ã—Ç–∏–π."""
        try:
            async for message in self.websocket:
                try:
                    event_data = json.loads(message)
                    await self.handle_event(event_data)
                except json.JSONDecodeError as e:
                    logger.error(f" –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
                except Exception as e:
                    logger.error(f" –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è: {e}")
        
        except websockets.exceptions.ConnectionClosed:
            logger.warning("‚ö†Ô∏è WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
            self.is_connected = False
        
        except Exception as e:
            logger.error(f" –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–∏: {e}")
    
    async def handle_event(self, event_data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–±—ã—Ç–∏–π."""
        event_type = event_data.get("type")
        logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ: {event_type}")
        
        if event_type == "session.updated":
            logger.info("‚úÖ –°–µ—Å—Å–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
        
        elif event_type == "response.text.delta":
            delta = event_data.get("delta", "")
            logger.info(f"üìù –¢–µ–∫—Å—Ç –¥–µ–ª—å—Ç–∞: {delta}")
        
        elif event_type == "response.text.done":
            text = event_data.get("text", "")
            logger.info(f"–¢–µ–∫—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: {text}")
        
        elif event_type == "error":
            error = event_data.get("error", {})
            logger.error(f" –û—à–∏–±–∫–∞ –æ—Ç OpenAI: {error}")
        
        else:
            logger.debug(f"üîç –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ: {event_type}")
    
    async def send_user_message(self, text):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        # –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –±–µ—Å–µ–¥—ã
        create_event = {
            "type": "conversation.item.create",
            "item": {
                "type": "message",
                "role": "user",
                "content": [
                    {
                        "type": "input_text",
                        "text": text
                    }
                ]
            }
        }
        await self.send_event(create_event)
        
        # –°–æ–∑–¥–∞–µ–º –æ—Ç–≤–µ—Ç
        response_event = {
            "type": "response.create"
        }
        await self.send_event(response_event)
        
        logger.info(f"üí¨ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {text[:50]}...")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç
realtime_client = SimpleRealtimeClient()

@router.message(CommandStart())
async def start_handler(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start."""
    await message.answer(
        "ü§ñ <b>–¢–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç —Å OpenAI Realtime API</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å OpenAI.",
        parse_mode="HTML"
    )

@router.message(F.text)
async def text_handler(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
    if not realtime_client.is_connected:
        await message.answer(" WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ OpenAI")
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º "–¥—É–º–∞—é..."
    thinking_msg = await message.answer("ü§î –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –≤ OpenAI...")
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ OpenAI
        await realtime_client.send_user_message(message.text)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await thinking_msg.edit_text(
            f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ OpenAI Realtime API!\n\n"
            f"üì§ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: <i>{message.text}</i>\n\n"
            f"üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç OpenAI.",
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await thinking_msg.edit_text(f" –û—à–∏–±–∫–∞: {e}")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    token = os.getenv("TG_BOT_TOKEN") or os.getenv("BOT_TOKEN")
    if not token:
        logger.error(" –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    if not os.getenv("OPENAI_API_KEY"):
        logger.error(" OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ OpenAI
    try:
        await realtime_client.connect()
    except Exception as e:
        logger.error(f" –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ OpenAI: {e}")
        return
    
    # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
    bot = Bot(token=token)
    dp = Dispatcher()
    dp.include_router(router)
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞ —Å OpenAI Realtime API...")
    
    try:
        await dp.start_polling(bot, skip_updates=True)
    except KeyboardInterrupt:
        logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    finally:
        await bot.session.close()
        if realtime_client.websocket:
            await realtime_client.websocket.close()

if __name__ == "__main__":
    asyncio.run(main())
