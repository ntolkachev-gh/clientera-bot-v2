#!/usr/bin/env python3
"""
Telegram bot handlers with Realtime API streaming support.
"""

import asyncio
from typing import Optional

from aiogram import Bot, F, Router
from aiogram.filters import Command, CommandStart
from aiogram.types import Message

from ..integrations.yclients_adapter import get_yclients_adapter
from ..realtime.client import get_realtime_client
from ..realtime.connection_pool import get_connection_pool
from ..realtime.events import StreamState
from ..utils.logger import get_logger
from ..utils.throttler import get_message_throttler, get_rate_limiter

logger = get_logger(__name__)
router = Router()

# Global instances
throttler = get_message_throttler()
rate_limiter = get_rate_limiter()


@router.message(CommandStart())
async def start_handler(message: Message) -> None:
    """Handle /start command."""
    user_id = message.from_user.id if message.from_user else 0
    user_name = message.from_user.first_name if message.from_user else "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    logger.info(f"Start command from user {user_id}")
    
    welcome_text = f"""ü¶∑ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—é ¬´–ë–µ–ª—ã–µ –∑—É–±—ã¬ª!</b>

–ü—Ä–∏–≤–µ—Ç, {user_name}! –Ø ‚Äî –≤–∞—à AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ü–æ–º–æ–≥—É:

üìã <b>–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º</b>
üí∞ <b>–£–∑–Ω–∞—Ç—å —Ü–µ–Ω—ã –Ω–∞ —É—Å–ª—É–≥–∏</b>
üë®‚Äç‚öïÔ∏è <b>–í—ã–±—Ä–∞—Ç—å –≤—Ä–∞—á–∞</b>
üìÖ <b>–ù–∞–π—Ç–∏ —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è</b>
üè• <b>–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª–∏–∞–ª–∞—Ö</b>

<i>–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç, –∏ —è –ø–æ–º–æ–≥—É!</i>

–ù–∞–ø—Ä–∏–º–µ—Ä:
‚Ä¢ "–•–æ—á—É –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ —Ç–µ—Ä–∞–ø–µ–≤—Ç—É"
‚Ä¢ "–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç –ª–µ—á–µ–Ω–∏–µ –∫–∞—Ä–∏–µ—Å–∞?"
‚Ä¢ "–ü–æ–∫–∞–∂–∏ —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã –Ω–∞ –∑–∞–≤—Ç—Ä–∞"
"""
    
    await message.answer(welcome_text, parse_mode="HTML")


@router.message(Command("stats"))
async def stats_handler(message: Message) -> None:
    """Handle /stats command - show connection pool statistics."""
    user_id = message.from_user.id if message.from_user else 0
    
    logger.info(f"Stats command from user {user_id}")
    
    try:
        yclients_adapter = get_yclients_adapter()
        connection_pool = await get_connection_pool(yclients_adapter)
        
        stats = connection_pool.get_pool_stats()
        
        stats_text = f"""üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π</b>

üîå <b>–°–æ–µ–¥–∏–Ω–µ–Ω–∏—è:</b>
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats['healthy_connections']}/{stats['pool_size']}
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_active_users']}
‚Ä¢ –ú–∞–∫—Å. –Ω–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ: {stats['max_users_per_connection']}

üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {stats['total_requests']}
‚Ä¢ –û—à–∏–±–æ–∫: {stats['total_errors']} ({stats['error_rate']:.1%})
‚Ä¢ –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {stats['strategy']}

üë• <b>–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>"""
        
        for conn_id, count in stats['user_distribution'].items():
            stats_text += f"\n‚Ä¢ {conn_id}: {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
        
        await message.answer(stats_text, parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"Error getting stats: {e}")
        await message.answer(" –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")


@router.message(Command("help"))
async def help_handler(message: Message) -> None:
    """Handle /help command."""
    help_text = """üÜò <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É</b>

<b>–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>
‚Ä¢ üìã –ó–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–∏–µ–º –∫ –≤—Ä–∞—á—É
‚Ä¢ üí∞ –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω
‚Ä¢ üë®‚Äç‚öïÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Ä–∞—á–∞—Ö
‚Ä¢ üìÖ –ü–æ–∏—Å–∫ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
‚Ä¢ üè• –ö–æ–Ω—Ç–∞–∫—Ç—ã —Ñ–∏–ª–∏–∞–ª–æ–≤

<b>–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:</b>
‚Ä¢ "–ó–∞–ø–∏—à–∏ –º–µ–Ω—è –∫ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥—É"
‚Ä¢ "–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç —á–∏—Å—Ç–∫–∞ –∑—É–±–æ–≤?"
‚Ä¢ "–ü–æ–∫–∞–∂–∏ –≤—Ä–∞—á–µ–π-—Ö–∏—Ä—É—Ä–≥–æ–≤"
‚Ä¢ "–ï—Å—Ç—å –ª–∏ –º–µ—Å—Ç–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞?"
‚Ä¢ "–ì–¥–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤–∞—à–∏ –∫–ª–∏–Ω–∏–∫–∏?"

<b>–ö–æ–º–∞–Ω–¥—ã:</b>
/start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/cancel - –æ—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è

üí° <i>–ü—Ä–æ—Å—Ç–æ –æ–ø–∏—à–∏—Ç–µ, —á—Ç–æ –Ω—É–∂–Ω–æ, –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º —è–∑—ã–∫–æ–º!</i>
"""
    
    await message.answer(help_text, parse_mode="HTML")


@router.message(Command("cancel"))
async def cancel_handler(message: Message, bot: Bot) -> None:
    """Handle /cancel command."""
    user_id = message.from_user.id if message.from_user else 0
    
    logger.info(f"Cancel command from user {user_id}")
    
    # Cancel any active streaming
    try:
        yclients_adapter = get_yclients_adapter()
        connection_pool = await get_connection_pool(yclients_adapter)
        
        stream_state = connection_pool.get_user_stream_state(user_id)
        if stream_state == StreamState.STREAMING:
            await connection_pool.cancel_user_stream(user_id)
            await message.answer("‚úÖ –¢–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω.")
        else:
            await message.answer("‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
    
    except Exception as e:
        logger.error(f"Error cancelling stream: {e}")
        await message.answer(" –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ.")


@router.message(F.text)
async def text_message_handler(message: Message, bot: Bot) -> None:
    """Handle text messages with Realtime API streaming."""
    if not message.text or not message.from_user:
        return
    
    user_id = message.from_user.id
    user_text = message.text
    
    logger.info(f"Text message from user {user_id}: {user_text[:50]}...")
    
    # Rate limiting check
    if rate_limiter.is_rate_limited(user_id):
        remaining = rate_limiter.get_remaining_requests(user_id)
        await message.answer(
            f"‚è≥ <b>–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤</b>\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º.\n"
            f"–û—Å—Ç–∞–ª–æ—Å—å –∑–∞–ø—Ä–æ—Å–æ–≤: {remaining}/5 –≤ 30 —Å–µ–∫—É–Ω–¥.\n\n"
            f"üí° <i>–≠—Ç–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ–º–æ–≥–∞–µ—Ç –æ–±–µ—Å–ø–µ—á–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—É—é —Ä–∞–±–æ—Ç—É –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.</i>",
            parse_mode="HTML"
        )
        return
    
    try:
        # Get connection pool
        yclients_adapter = get_yclients_adapter()
        connection_pool = await get_connection_pool(yclients_adapter)
        
        # Send "thinking" placeholder
        thinking_message = await message.answer("ü§î <i>–î—É–º–∞—é...</i>", parse_mode="HTML")
        
        # Start streaming through pool
        stream, connection_id = await connection_pool.send_user_message(
            user_id=user_id,
            text=user_text,
            message_id=thinking_message.message_id
        )
        
        logger.info(f"üì° User {user_id} streaming on connection #{connection_id}")
        
        # Set up streaming callbacks
        accumulated_text = ""
        last_sent_text = ""
        
        async def on_delta(delta: str, full_text: str) -> None:
            """Handle text delta updates."""
            nonlocal accumulated_text, last_sent_text
            accumulated_text = full_text
            
            # Throttle message edits
            key = f"{user_id}:{thinking_message.message_id}"
            
            async def edit_message(content: str) -> None:
                try:
                    await bot.edit_message_text(
                        chat_id=message.chat.id,
                        message_id=thinking_message.message_id,
                        text=content,
                        parse_mode="HTML"
                    )
                except Exception as e:
                    logger.error(f"Failed to edit message: {e}")
            
            await throttler.throttled_edit(key, full_text, edit_message)
        
        async def on_done(final_text: str) -> None:
            """Handle completion."""
            nonlocal accumulated_text, last_sent_text
            accumulated_text = final_text
            
            # Final message edit
            key = f"{user_id}:{thinking_message.message_id}"
            
            async def edit_message(content: str) -> None:
                try:
                    await bot.edit_message_text(
                        chat_id=message.chat.id,
                        message_id=thinking_message.message_id,
                        text=content,
                        parse_mode="HTML"
                    )
                except Exception as e:
                    logger.error(f"Failed to edit final message: {e}")
            
            await throttler.throttled_edit(key, final_text, edit_message, force=True)
            logger.info(f"Streaming completed for user {user_id}")
        
        async def on_error(error: Exception) -> None:
            """Handle streaming errors."""
            nonlocal accumulated_text, last_sent_text
            logger.error(f"Streaming error for user {user_id}: {error}")
            
            error_text = "üòî <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</b>\n\n"
            
            if "rate limit" in str(error).lower():
                error_text += "–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É."
            elif "timeout" in str(error).lower():
                error_text += "–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å –ø—Ä–æ—â–µ."
            else:
                error_text += "–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–∑–∂–µ –∏–ª–∏ –≤—ã–±–µ—Ä–µ–º –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è?"
            
            error_text += "\n\nüí° <i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–∏–º–µ—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤.</i>"
            
            try:
                await bot.edit_message_text(
                    chat_id=message.chat.id,
                    message_id=thinking_message.message_id,
                    text=error_text,
                    parse_mode="HTML"
                )
            except Exception as e:
                logger.error(f"Failed to edit error message: {e}")
        
        # Get the actual client for this user to set callbacks
        client, _ = await connection_pool.get_connection_for_user(user_id)
        
        # Set callbacks
        client.set_stream_callbacks(
            user_id=user_id,
            on_delta=on_delta,
            on_done=on_done,
            on_error=on_error
        )
        
        # Wait for completion with timeout
        timeout_seconds = 30
        start_time = asyncio.get_event_loop().time()
        
        while True:
            state = connection_pool.get_user_stream_state(user_id)
            
            if state in [StreamState.DONE, StreamState.ERROR, StreamState.CANCELLED]:
                break
            
            # Check timeout
            if asyncio.get_event_loop().time() - start_time > timeout_seconds:
                logger.warning(f"Stream timeout for user {user_id}")
                await connection_pool.cancel_user_stream(user_id)
                await on_error(Exception("Timeout"))
                break
            
            await asyncio.sleep(0.1)
        
        # Release connection when done
        await connection_pool.release_user_connection(user_id)
    
    except Exception as e:
        logger.error(f"Error handling text message from user {user_id}: {e}")
        
        error_text = " <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</b>\n\n"
        error_text += "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n\n"
        error_text += "üí° <i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.</i>"
        
        try:
            await message.answer(error_text, parse_mode="HTML")
        except Exception as send_error:
            logger.error(f"Failed to send error message: {send_error}")




def get_handlers_router() -> Router:
    """Get configured handlers router."""
    return router
