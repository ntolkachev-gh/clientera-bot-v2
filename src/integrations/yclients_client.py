#!/usr/bin/env python3
"""
YClients API –Ω–∏–∑–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π HTTP –∫–ª–∏–µ–Ω—Ç.
"""

import os
import aiohttp
from typing import Dict, Any, Optional
from ..utils.logger import get_logger

logger = get_logger(__name__)


class YClientsAPI:
    """–ù–∏–∑–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π HTTP –∫–ª–∏–µ–Ω—Ç –¥–ª—è YClients API."""
    
    def __init__(self, token: str, company_id: str, form_id: str = "0"):
        self.token = token
        self.company_id = company_id
        self.form_id = form_id
        self.user_token: Optional[str] = None
        self.base_url = "https://api.yclients.com/api/v1"
        self.headers = {
            'Accept': 'application/vnd.yclients.v2+json',
            'Content-Type': 'application/json'
        }

    async def _make_request(self, method: str, endpoint: str, data: Optional[Dict] = None) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç HTTP –∑–∞–ø—Ä–æ—Å –∫ YClients API"""
        url = f"{self.base_url}/{endpoint}"

        headers = self.headers.copy()
        if self.user_token:
            # –§–æ—Ä–º–∞—Ç: Bearer token, User user_token
            headers['Authorization'] = f'Bearer {self.token}, User {self.user_token}'
        else:
            # –î–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –±–µ–∑ user token –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–æ–∫–µ–Ω
            headers['Authorization'] = f'Bearer {self.token}'

        logger.debug(f"YClients API {method} {url}")
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.request(method, url, headers=headers, json=data) as response:
                    response_data = await response.json()
                    
                    if response.status >= 400:
                        logger.error(f"YClients API error {response.status}: {response_data}")
                        return {
                            "success": False,
                            "status_code": response.status,
                            "error": f"HTTP {response.status}: {response_data.get('message', 'Unknown error')}",
                            "raw_response": response_data
                        }
                    
                    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –æ—Ç–≤–µ—Ç - –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —Å–ª–æ–≤–∞—Ä—å, –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º
                    if isinstance(response_data, dict):
                        return response_data
                    else:
                        # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ —Å–ª–æ–≤–∞—Ä—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–ø–∏—Å–æ–∫), –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º –µ–≥–æ
                        return {
                            "success": True,
                            "data": response_data
                        }
                    
        except Exception as e:
            logger.error(f"YClients API request failed: {e}")
            return {"success": False, "error": str(e)}

    def update_user_token(self, user_token: str) -> None:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç user token –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤."""
        self.user_token = user_token
        logger.info("‚úÖ YClients user token –æ–±–Ω–æ–≤–ª–µ–Ω")

    async def get_user_token(self, login: str, password: str) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç user token —á–µ—Ä–µ–∑ –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å"""
        data = {
            "login": login,
            "password": password
        }
        
        response = await self._make_request('POST', 'auth', data)
        
        if not response.get('success'):
            raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å user token: {response.get('error', 'Unknown error')}")
        
        user_token = response.get('data', {}).get('user_token')
        if not user_token:
            raise Exception("User token –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ API")
        
        return user_token

    async def get_services(self, staff_id: Optional[int] = None) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥"""
        endpoint = f'services/{self.company_id}'
        if staff_id:
            endpoint += f'?staff_id={staff_id}'
        return await self._make_request('GET', endpoint)

    async def get_staff(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"""
        endpoint = f'book_staff/{self.company_id}'
        return await self._make_request('GET', endpoint)

    async def get_book_dates(self, staff_id: int, service_id: int) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã –¥–ª—è –∑–∞–ø–∏—Å–∏"""
        endpoint = f'book_dates/{self.company_id}/{staff_id}/{service_id}'
        return await self._make_request('GET', endpoint)

    async def get_book_times(self, staff_id: int, service_id: int, date: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É"""
        endpoint = f'book_times/{self.company_id}/{staff_id}/{date}'
        return await self._make_request('GET', endpoint)

    async def create_record(self, data: Dict[str, Any]) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–∏–µ–º"""
        endpoint = f'book_record/{self.company_id}'
        return await self._make_request('POST', endpoint, data)

    async def get_records(self, staff_id: Optional[int] = None, date: Optional[str] = None) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π"""
        endpoint = f'records/{self.company_id}'
        params = []
        
        if staff_id:
            params.append(f'staff_id={staff_id}')
        if date:
            params.append(f'date={date}')
            
        if params:
            endpoint += '?' + '&'.join(params)
            
        return await self._make_request('GET', endpoint)

    async def get_company_info(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–ø–∞–Ω–∏–∏"""
        endpoint = f'company/{self.company_id}'
        return await self._make_request('GET', endpoint)

    async def create_client(self, client_data: Dict[str, Any]) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞"""
        endpoint = f'clients/{self.company_id}'
        return await self._make_request('POST', endpoint, client_data)

    async def find_or_create_client(self, name: str, phone: str) -> Dict[str, Any]:
        """–ù–∞—Ö–æ–¥–∏—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–≥–æ"""
        
        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        def normalize_phone(phone_str: str) -> str:
            return phone_str.replace('+', '').replace('-', '').replace(' ', '').replace('(', '').replace(')', '')
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É
        search_endpoint = f'clients/{self.company_id}?phone={phone}'
        search_result = await self._make_request('GET', search_endpoint)
        
        if search_result.get('success') and search_result.get('data'):
            # –ö–ª–∏–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω
            clients = search_result['data']
            if clients:
                client = clients[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–≥–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
                logger.info(f"üì± –ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–ª–∏–µ–Ω—Ç: {client.get('name', name)}")
                return {"success": True, "data": client}
        
        # –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ
        logger.info(f"‚ûï –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞: {name}")
        client_data = {
            "name": name,
            "phone": phone,
            "sex_id": 0  # –ù–µ —É–∫–∞–∑–∞–Ω–æ
        }
        
        create_result = await self.create_client(client_data)
        
        # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –æ—à–∏–±–∫—É 422 (–∫–ª–∏–µ–Ω—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç), –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –µ–≥–æ –µ—â–µ —Ä–∞–∑
        if not create_result.get('success') and create_result.get('status_code') == 422:
            logger.warning(f"‚ö†Ô∏è –ö–ª–∏–µ–Ω—Ç —Å —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º {phone} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫...")
            
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–∏—Å–∫–∞
            search_variants = [
                phone,  # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä
                phone.replace('+7', '8'),  # +7 -> 8
                phone.replace('8', '+7', 1) if phone.startswith('8') else phone,  # 8 -> +7
                normalize_phone(phone),  # –¢–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
            ]
            
            # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
            search_variants = list(set(search_variants))
            
            for variant in search_variants:
                if variant == phone:
                    continue  # –£–∂–µ –ø—Ä–æ–±–æ–≤–∞–ª–∏ –≤—ã—à–µ
                    
                logger.debug(f"üîç –ü—Ä–æ–±—É–µ–º –ø–æ–∏—Å–∫ —Å –≤–∞—Ä–∏–∞–Ω—Ç–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {variant}")
                search_endpoint = f'clients/{self.company_id}?phone={variant}'
                variant_result = await self._make_request('GET', search_endpoint)
                
                if variant_result.get('success') and variant_result.get('data'):
                    clients = variant_result['data']
                    if clients:
                        client = clients[0]
                        logger.info(f"üì± –ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–ª–∏–µ–Ω—Ç —á–µ—Ä–µ–∑ –≤–∞—Ä–∏–∞–Ω—Ç {variant}: {client.get('name', name)}")
                        return {"success": True, "data": client}
            
            # –ï—Å–ª–∏ –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, –¥–µ–ª–∞–µ–º –ø–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º
            logger.debug("üîç –ü–æ–∏—Å–∫ —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤...")
            all_clients_endpoint = f'clients/{self.company_id}'
            all_clients_result = await self._make_request('GET', all_clients_endpoint)
            
            if all_clients_result.get('success') and all_clients_result.get('data'):
                clients = all_clients_result['data']
                clean_phone = normalize_phone(phone)
                
                for client in clients:
                    client_phone = client.get('phone', '')
                    clean_client_phone = normalize_phone(client_phone)
                    
                    if clean_client_phone == clean_phone:
                        logger.info(f"üì± –ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–ª–∏–µ–Ω—Ç —á–µ—Ä–µ–∑ –ø–æ–ª–Ω—ã–π –ø–æ–∏—Å–∫: {client.get('name', name)} (—Ç–µ–ª: {client_phone})")
                        return {"success": True, "data": client}
            
            # –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ –Ω–∞—à–ª–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É —Å–æ–∑–¥–∞–Ω–∏—è
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞ —Å —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º {phone}, —Ö–æ—Ç—è —Å–∏—Å—Ç–µ–º–∞ –≥–æ–≤–æ—Ä–∏—Ç —á—Ç–æ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            logger.error(f"‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {create_result.get('raw_response', {})}")
            return create_result
        
        return create_result


def create_yclients_client() -> YClientsAPI:
    """–°–æ–∑–¥–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä YClients API –∫–ª–∏–µ–Ω—Ç–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è."""
    token = os.getenv("YCLIENTS_TOKEN")
    company_id = os.getenv("YCLIENTS_COMPANY_ID")
    form_id = os.getenv("YCLIENTS_FORM_ID", "0")
    
    if not token or not company_id:
        raise ValueError("YCLIENTS_TOKEN –∏ YCLIENTS_COMPANY_ID –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –≤ .env —Ñ–∞–π–ª–µ")
    
    return YClientsAPI(token=token, company_id=company_id, form_id=form_id)
