"""
–°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∑–∞–ø–∏—Å—è—Ö –≤ –¥—Ä—É–≥–æ–π Telegram –±–æ—Ç.
"""

import asyncio
import aiohttp
from typing import Dict, Any, Optional
from datetime import datetime

from ..config.env import get_settings
from ..utils.logger import get_logger

logger = get_logger(__name__)


class NotificationService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∑–∞–ø–∏—Å—è—Ö."""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
        self.settings = get_settings()
        self.bot_token = self.settings.NOTIFICATION_BOT_TOKEN
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ chat_id –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        self.chat_ids = []
        
        # –û–¥–∏–Ω–æ—á–Ω—ã–π chat_id
        if self.settings.NOTIFICATION_CHAT_ID:
            self.chat_ids.append(self.settings.NOTIFICATION_CHAT_ID.strip())
        
        # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ chat_id (—Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—è—Ç—ã–º–∏)
        if self.settings.NOTIFICATION_CHAT_IDS:
            multiple_ids = [
                chat_id.strip() 
                for chat_id in self.settings.NOTIFICATION_CHAT_IDS.split(',') 
                if chat_id.strip()
            ]
            self.chat_ids.extend(multiple_ids)
        
        # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        self.chat_ids = list(set(self.chat_ids))
        
        if self.bot_token and self.chat_ids:
            logger.info(f"Notification service initialized for {len(self.chat_ids)} recipients")
            logger.debug(f"Recipients: {self.chat_ids}")
        else:
            logger.warning("Notification service disabled - missing token or chat_ids")
    
    def is_enabled(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤–∫–ª—é—á–µ–Ω –ª–∏ —Å–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
        return bool(self.bot_token and self.chat_ids)
    
    async def send_appointment_notification(
        self,
        client_name: str,
        client_phone: str,
        service_name: str,
        master_name: str,
        appointment_datetime: str,
        price: Optional[float] = None,
        comment: str = "",
        booking_source: str = "Telegram Bot"
    ) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏.
        
        Args:
            client_name: –ò–º—è –∫–ª–∏–µ–Ω—Ç–∞
            client_phone: –¢–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞
            service_name: –ù–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏
            master_name: –ò–º—è –º–∞—Å—Ç–µ—Ä–∞
            appointment_datetime: –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏
            price: –°—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            comment: –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–ø–∏—Å–∏
            booking_source: –ò—Å—Ç–æ—á–Ω–∏–∫ –∑–∞–ø–∏—Å–∏
            
        Returns:
            bool: True –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        if not self.is_enabled():
            logger.debug("Notification service disabled, skipping notification")
            return False
        
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            message_text = self._format_notification_message(
                client_name=client_name,
                client_phone=client_phone,
                service_name=service_name,
                master_name=master_name,
                appointment_datetime=appointment_datetime,
                price=price,
                comment=comment,
                booking_source=booking_source
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è–º
            success_count = 0
            total_recipients = len(self.chat_ids)
            
            for chat_id in self.chat_ids:
                success = await self._send_telegram_message(message_text, chat_id)
                if success:
                    success_count += 1
                else:
                    logger.error(f"Failed to send notification to {chat_id}")
            
            if success_count > 0:
                logger.info(f"Notification sent for appointment: {client_name} - {service_name} "
                          f"({success_count}/{total_recipients} recipients)")
            else:
                logger.error(f"Failed to send notification to any recipient for appointment: {client_name} - {service_name}")
            
            return success_count > 0
            
        except Exception as e:
            logger.error(f"Error sending appointment notification: {e}")
            return False
    
    def _format_notification_message(
        self,
        client_name: str,
        client_phone: str,
        service_name: str,
        master_name: str,
        appointment_datetime: str,
        price: Optional[float] = None,
        comment: str = "",
        booking_source: str = "Telegram Bot"
    ) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–ø–∏—Å–∏."""
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        message_lines = [
            "üÜï <b>–ù–û–í–ê–Ø –ó–ê–ü–ò–°–¨</b>",
            "",
            f"üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {client_name}",
            f"üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {client_phone}",
            "",
            f"üíÖ <b>–£—Å–ª—É–≥–∞:</b> {service_name}",
            f"üë©‚Äçüíº <b>–ú–∞—Å—Ç–µ—Ä:</b> {master_name}",
            f"üìÖ <b>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:</b> {appointment_datetime}",
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–Ω—É –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞
        if price:
            message_lines.append(f"üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {price:,.0f} ‚ÇΩ")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –µ—Å–ª–∏ –µ—Å—Ç—å
        if comment and comment.strip():
            message_lines.extend([
                "",
                f"üí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {comment}"
            ])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–µ –∏ –≤—Ä–µ–º–µ–Ω–∏
        current_time = datetime.now().strftime("%d.%m.%Y %H:%M")
        message_lines.extend([
            "",
            f"üì≤ <b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> {booking_source}",
            f"üïê <b>–í—Ä–µ–º—è –∑–∞–ø–∏—Å–∏:</b> {current_time}"
        ])
        
        return "\n".join(message_lines)
    
    async def _send_telegram_message(self, text: str, chat_id: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram Bot API."""
        if not self.bot_token or not chat_id:
            return False
        
        url = f"https://api.telegram.org/bot{self.bot_token}/sendMessage"
        
        data = {
            "chat_id": chat_id,
            "text": text,
            "parse_mode": "HTML",
            "disable_web_page_preview": True
        }
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(url, json=data) as response:
                    response_text = await response.text()
                    if response.status == 200:
                        result = await response.json()
                        if result.get("ok"):
                            return True
                        else:
                            logger.error(f"Telegram API error: {result.get('description', 'Unknown error')}")
                            logger.debug(f"Full response: {result}")
                            return False
                    else:
                        logger.error(f"HTTP error {response.status} when sending notification")
                        logger.debug(f"Response body: {response_text}")
                        try:
                            error_data = await response.json()
                            logger.error(f"Error details: {error_data}")
                        except:
                            pass
                        return False
                        
        except asyncio.TimeoutError:
            logger.error("Timeout when sending notification")
            return False
        except Exception as e:
            logger.error(f"Exception when sending notification: {e}")
            return False
    
    async def test_notification(self) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–∏—Å–∞."""
        if not self.is_enabled():
            logger.warning("Cannot test notification - service disabled")
            return False
        
        test_message = (
            "üß™ <b>–¢–ï–°–¢–û–í–û–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ï</b>\n\n"
            "–°–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∑–∞–ø–∏—Å—è—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!\n\n"
            f"üïê –í—Ä–µ–º—è —Ç–µ—Å—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n"
            f"üìä –ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {len(self.chat_ids)}"
        )
        
        success_count = 0
        total_recipients = len(self.chat_ids)
        
        for chat_id in self.chat_ids:
            success = await self._send_telegram_message(test_message, chat_id)
            if success:
                success_count += 1
            else:
                logger.error(f"Failed to send test notification to {chat_id}")
        
        if success_count > 0:
            logger.info(f"Test notification sent successfully ({success_count}/{total_recipients} recipients)")
        else:
            logger.error("Failed to send test notification to any recipient")
        
        return success_count > 0


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
_notification_service: Optional[NotificationService] = None


def get_notification_service() -> NotificationService:
    """–ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    global _notification_service
    
    if _notification_service is None:
        _notification_service = NotificationService()
    
    return _notification_service
