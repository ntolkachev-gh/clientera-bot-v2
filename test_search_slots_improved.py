#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ search_slots
"""

import asyncio
import os
import sys
from datetime import datetime, timedelta

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

from integrations.yclients_adapter import get_yclients_adapter
from utils.logger import get_logger

logger = get_logger(__name__)

async def test_search_slots():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ–≤—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é search_slots"""
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–¥–∞–ø—Ç–µ—Ä
    adapter = get_yclients_adapter()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Ä–∞—á–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    print("üîç –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Ä–∞—á–µ–π...")
    doctors = await adapter.list_doctors()
    
    if not doctors:
        print("‚ùå –í—Ä–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–≥–æ –≤—Ä–∞—á–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    test_doctor = doctors[0]
    doctor_id = test_doctor['id']
    doctor_name = test_doctor['name']
    
    print(f"üë®‚Äç‚öïÔ∏è –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –≤—Ä–∞—á–æ–º: {doctor_name} (ID: {doctor_id})")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ —Å–ª–æ—Ç–æ–≤ –Ω–∞ –∑–∞–≤—Ç—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å
    tomorrow = (datetime.now() + timedelta(days=1)).strftime('%Y-%m-%d')
    
    print(f"üìÖ –ò—â–µ–º —Å–ª–æ—Ç—ã –Ω–∞ –¥–∞—Ç—É: {tomorrow}")
    
    # –í—ã–∑—ã–≤–∞–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é search_slots
    slots = await adapter.search_slots(doctor_id, tomorrow)
    
    print(f"üéØ –ù–∞–π–¥–µ–Ω–æ —Å–ª–æ—Ç–æ–≤: {len(slots)}")
    
    # –í—ã–≤–æ–¥–∏–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª–æ—Ç–æ–≤
    for i, slot in enumerate(slots[:5]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5
        print(f"   {i+1}. {slot['time']} - {slot['doctor']} (–¥–æ—Å—Ç—É–ø–µ–Ω: {slot['available']})")
    
    if len(slots) > 5:
        print(f"   ... –∏ –µ—â–µ {len(slots) - 5} —Å–ª–æ—Ç–æ–≤")
    
    return slots

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∞"""
    try:
        print("üöÄ –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é search_slots")
        print("=" * 50)
        
        slots = await test_search_slots()
        
        print("\n" + "=" * 50)
        if slots:
            print("‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!")
            print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: –Ω–∞–π–¥–µ–Ω–æ {len(slots)} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤")
        else:
            print("‚ö†Ô∏è –°–ª–æ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã (–≤–æ–∑–º–æ–∂–Ω–æ, –≤—Ä–∞—á –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∑–∞–≤—Ç—Ä–∞)")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        logger.error(f"Test error: {e}")

if __name__ == "__main__":
    asyncio.run(main())
