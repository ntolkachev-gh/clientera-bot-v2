#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ —É—Å–ª—É–≥ –∫ –≤—Ä–∞—á–∞–º –≤ YClients
"""

import asyncio
import json
import logging
import os
from dotenv import load_dotenv
import aiohttp
import requests

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class YClientsServiceStaffFixer:
    def __init__(self):
        self.token = os.getenv('YCLIENTS_TOKEN')
        self.company_id = os.getenv('YCLIENTS_COMPANY_ID')
        self.form_id = os.getenv('YCLIENTS_FORM_ID')
        self.user_token = None
        self.base_url = "https://api.yclients.com/api/v1"
        self.headers = {
            'Accept': 'application/vnd.yclients.v2+json',
            'Authorization': f'Bearer {self.token}',
            'Content-Type': 'application/json'
        }
        
        # –ü–æ–ª—É—á–∞–µ–º user token
        try:
            login = os.getenv('YCLIENTS_LOGIN')
            password = os.getenv('YCLIENTS_PASSWORD')
            if login and password:
                user_token = self.get_user_token(login, password)
                if user_token:
                    self.user_token = user_token
                    logger.info("‚úÖ User token –ø–æ–ª—É—á–µ–Ω")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å user token: {e}")
    
    def get_user_token(self, login, password):
        """–ü–æ–ª—É—á–∞–µ—Ç user token —á–µ—Ä–µ–∑ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å"""
        url = f"{self.base_url}/user/auth"
        data = {
            "login": login,
            "password": password
        }
        headers = {
            'Accept': 'application/vnd.yclients.v2+json',
            'Authorization': f'Bearer {self.token}',
            'Content-Type': 'application/json'
        }
        
        try:
            response = requests.post(url, json=data, headers=headers)
            result = response.json()
            if result.get('success') and result.get('data', {}).get('user_token'):
                return result['data']['user_token']
            return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è user token: {e}")
            return None
    
    async def _make_request(self, method, endpoint, data=None):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç HTTP –∑–∞–ø—Ä–æ—Å –∫ YClients API"""
        url = f"{self.base_url}/{endpoint}"
        headers = self.headers.copy()
        if self.user_token:
            headers['Authorization'] = f'Bearer {self.token}, User {self.user_token}'
        
        logger.info(f"üîó YClients API –∑–∞–ø—Ä–æ—Å: {method} {url}")
        
        async with aiohttp.ClientSession() as session:
            try:
                if method == 'GET':
                    async with session.get(url, headers=headers) as response:
                        result = await response.json()
                        logger.info(f"üì• YClients API –æ—Ç–≤–µ—Ç ({response.status}): —Å—Ç–∞—Ç—É—Å={result.get('success')}")
                        return result
                elif method == 'PUT':
                    async with session.put(url, headers=headers, json=data) as response:
                        result = await response.json()
                        logger.info(f"üì• YClients API –æ—Ç–≤–µ—Ç ({response.status}): —Å—Ç–∞—Ç—É—Å={result.get('success')}")
                        return result
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ YClients API: {e}")
                return {"success": False, "error": str(e)}
    
    async def get_all_staff(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"""
        result = await self._make_request('GET', f'staff/{self.company_id}')
        if result.get('success'):
            return result.get('data', [])
        return []
    
    async def get_all_services(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —É—Å–ª—É–≥–∏"""
        result = await self._make_request('GET', f'services/{self.company_id}')
        if result.get('success'):
            return result.get('data', [])
        return []
    
    async def update_service_staff(self, service_id, staff_ids):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–∏–≤—è–∑–∫—É —É—Å–ª—É–≥–∏ –∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º"""
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ endpoints
        endpoints_to_try = [
            f'company/{self.company_id}/services/{service_id}',
            f'services/{self.company_id}/{service_id}',
            f'service/{service_id}',
            f'company/{self.company_id}/service/{service_id}'
        ]
        
        data = {
            "staff": staff_ids
        }
        
        for endpoint in endpoints_to_try:
            logger.info(f"   üîÑ –ü—Ä–æ–±—É–µ–º endpoint: {endpoint}")
            result = await self._make_request('PUT', endpoint, data)
            if result.get('success'):
                logger.info(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ —á–µ—Ä–µ–∑ endpoint: {endpoint}")
                return True
            else:
                logger.info(f"    –û—à–∏–±–∫–∞ —á–µ—Ä–µ–∑ endpoint: {endpoint} - {result.get('meta', {}).get('message', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
        
        return False
    
    async def fix_services_staff_mapping(self):
        """–ü—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç —É—Å–ª—É–≥–∏ –∫ –ø–æ–¥—Ö–æ–¥—è—â–∏–º –≤—Ä–∞—á–∞–º"""
        logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–∏–≤—è–∑–∫—É —É—Å–ª—É–≥ –∫ –≤—Ä–∞—á–∞–º...")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –≤—Ä–∞—á–µ–π
        staff = await self.get_all_staff()
        logger.info(f"üë®‚Äç‚öïÔ∏è –ù–∞–π–¥–µ–Ω–æ –≤—Ä–∞—á–µ–π: {len(staff)}")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É—Å–ª—É–≥–∏
        services = await self.get_all_services()
        logger.info(f"ü¶∑ –ù–∞–π–¥–µ–Ω–æ —É—Å–ª—É–≥: {len(services)}")
        
        # –°–æ–∑–¥–∞–µ–º –º–∞–ø–ø–∏–Ω–≥ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π –∫ —É—Å–ª—É–≥–∞–º
        specialization_services = {
            "—Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥-—Ç–µ—Ä–∞–ø–µ–≤—Ç": [
                "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∞", "–õ–µ—á–µ–Ω–∏–µ –∫–∞—Ä–∏–µ—Å–∞", "–õ–µ—á–µ–Ω–∏–µ –ø—É–ª—å–ø–∏—Ç–∞", 
                "–õ–µ—á–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–æ–Ω—Ç–∏—Ç–∞", "–•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è —Ä–µ—Å—Ç–∞–≤—Ä–∞—Ü–∏—è", "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–æ–º–±—ã"
            ],
            "—Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥-—Ö–∏—Ä—É—Ä–≥": [
                "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Ö–∏—Ä—É—Ä–≥–∞", "–£–¥–∞–ª–µ–Ω–∏–µ –∑—É–±–∞ –ø—Ä–æ—Å—Ç–æ–µ", "–£–¥–∞–ª–µ–Ω–∏–µ –∑—É–±–∞ —Å–ª–æ–∂–Ω–æ–µ", 
                "–£–¥–∞–ª–µ–Ω–∏–µ –∑—É–±–∞ –º—É–¥—Ä–æ—Å—Ç–∏", "–ò–º–ø–ª–∞–Ω—Ç–∞—Ü–∏—è –∑—É–±–∞", "–°–∏–Ω—É—Å-–ª–∏—Ñ—Ç–∏–Ω–≥", "–£–¥–∞–ª–µ–Ω–∏–µ –∑—É–±–∞"
            ],
            "—Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥-–æ—Ä—Ç–æ–ø–µ–¥": [
                "–ö–æ—Ä–æ–Ω–∫–∞ –º–µ—Ç–∞–ª–ª–æ–∫–µ—Ä–∞–º–∏—á–µ—Å–∫–∞—è", "–ö–æ—Ä–æ–Ω–∫–∞ –∫–µ—Ä–∞–º–∏—á–µ—Å–∫–∞—è", "–ö–æ—Ä–æ–Ω–∫–∞ —Ü–∏—Ä–∫–æ–Ω–∏–µ–≤–∞—è",
                "–°—ä–µ–º–Ω—ã–π –ø—Ä–æ—Ç–µ–∑ —á–∞—Å—Ç–∏—á–Ω—ã–π", "–°—ä–µ–º–Ω—ã–π –ø—Ä–æ—Ç–µ–∑ –ø–æ–ª–Ω—ã–π"
            ],
            "—Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥-–≥–∏–≥–∏–µ–Ω–∏—Å—Ç": [
                "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —á–∏—Å—Ç–∫–∞ –∑—É–±–æ–≤", "Air Flow —á–∏—Å—Ç–∫–∞", "–§—Ç–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –∑—É–±–æ–≤",
                "–ì–µ—Ä–º–µ—Ç–∏–∑–∞—Ü–∏—è —Ñ–∏—Å—Å—É—Ä"
            ],
            "–æ—Ä—Ç–æ–¥–æ–Ω—Ç": [
                "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –æ—Ä—Ç–æ–¥–æ–Ω—Ç–∞", "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±—Ä–µ–∫–µ—Ç–æ–≤ –º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏—Ö", 
                "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±—Ä–µ–∫–µ—Ç–æ–≤ –∫–µ—Ä–∞–º–∏—á–µ—Å–∫–∏—Ö", "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±—Ä–µ–∫–µ—Ç–æ–≤ —Å–∞–ø—Ñ–∏—Ä–æ–≤—ã—Ö",
                "–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–∫—É—Å–∞ —ç–ª–∞–π–Ω–µ—Ä–∞–º–∏", "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±—Ä–µ–∫–µ—Ç–æ–≤"
            ],
            "—Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥-–ø–∞—Ä–æ–¥–æ–Ω—Ç–æ–ª–æ–≥": [
                "–õ–µ—á–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–æ–Ω—Ç–∏—Ç–∞", "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —á–∏—Å—Ç–∫–∞ –∑—É–±–æ–≤"
            ]
        }
        
        # –û–±—â–∏–µ —É—Å–ª—É–≥–∏ –¥–ª—è –≤—Å–µ—Ö –≤—Ä–∞—á–µ–π
        universal_services = [
            "–†–µ–Ω—Ç–≥–µ–Ω–æ–≥—Ä–∞—Ñ–∏—è –∑—É–±–∞", "–ü–∞–Ω–æ—Ä–∞–º–Ω—ã–π —Å–Ω–∏–º–æ–∫", "–û—Ç–±–µ–ª–∏–≤–∞–Ω–∏–µ –∑—É–±–æ–≤ ZOOM",
            "–û—Ç–±–µ–ª–∏–≤–∞–Ω–∏–µ –∑—É–±–æ–≤ –¥–æ–º–∞—à–Ω–µ–µ", "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–∏–Ω–∏—Ä–æ–≤", "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ª—é–º–∏–Ω–∏—Ä–æ–≤",
            "–û—Ç–±–µ–ª–∏–≤–∞–Ω–∏–µ –∑—É–±–æ–≤"
        ]
        
        updated_services = 0
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —É—Å–ª—É–≥—É
        for service in services:
            service_title = service.get('title', '')
            service_id = service.get('id')
            
            if not service_title or service_title == "–£—Å–ª—É–≥–∞":
                continue
                
            logger.info(f"üîß –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É—Å–ª—É–≥—É: {service_title}")
            
            # –ù–∞–π–¥–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤—Ä–∞—á–µ–π
            suitable_staff = []
            
            # –ï—Å–ª–∏ —ç—Ç–æ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —É—Å–ª—É–≥–∞ - –¥–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ—Ö –≤—Ä–∞—á–µ–π
            if service_title in universal_services:
                suitable_staff = [s['id'] for s in staff]
                logger.info(f"   üìã –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —É—Å–ª—É–≥–∞ - –Ω–∞–∑–Ω–∞—á–∞–µ–º –≤—Å–µ–º {len(suitable_staff)} –≤—Ä–∞—á–∞–º")
            else:
                # –ù–∞–π–¥–µ–º –≤—Ä–∞—á–µ–π –ø–æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
                for staff_member in staff:
                    specialization = staff_member.get('specialization', '')
                    if specialization in specialization_services:
                        if service_title in specialization_services[specialization]:
                            suitable_staff.append(staff_member['id'])
                
                logger.info(f"   üë®‚Äç‚öïÔ∏è –ù–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤—Ä–∞—á–µ–π: {len(suitable_staff)}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —É—Å–ª—É–≥—É
            if suitable_staff:
                success = await self.update_service_staff(service_id, suitable_staff)
                if success:
                    updated_services += 1
                    logger.info(f"   ‚úÖ –£—Å–ª—É–≥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
                else:
                    logger.warning(f"   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —É—Å–ª—É–≥—É")
            else:
                logger.warning(f"    –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤—Ä–∞—á–µ–π")
        
        logger.info(f"üéâ –û–±–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ª—É–≥: {updated_services} –∏–∑ {len(services)}")
        return updated_services

async def main():
    fixer = YClientsServiceStaffFixer()
    await fixer.fix_services_staff_mapping()

if __name__ == "__main__":
    asyncio.run(main())
