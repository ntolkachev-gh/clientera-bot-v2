#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è YClients —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ (—É—Å–ª—É–≥–∏ –∏ –≤—Ä–∞—á–∏)
"""

import asyncio
import json
import logging
import os
from dotenv import load_dotenv
import aiohttp

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class YClientsDataFiller:
    def __init__(self):
        self.token = os.getenv("YCLIENTS_TOKEN")
        self.company_id = os.getenv("YCLIENTS_COMPANY_ID")
        self.user_token = None
        self.base_url = "https://api.yclients.com/api/v1"
        self.headers = {
            'Accept': 'application/vnd.yclients.v2+json',
            'Authorization': f'Bearer {self.token}',
            'Content-Type': 'application/json'
        }
        
        if not all([self.token, self.company_id]):
            raise ValueError("Clients –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ YCLIENTS_TOKEN –∏ YCLIENTS_COMPANY_ID –≤ .env —Ñ–∞–π–ª")
    
    async def _make_request(self, method, endpoint, data=None):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç HTTP –∑–∞–ø—Ä–æ—Å –∫ YClients API"""
        url = f"{self.base_url}/{endpoint}"
        
        headers = self.headers.copy()
        if self.user_token:
            headers['Authorization'] = f'Bearer {self.token}, User {self.user_token}'
            
        logger.info(f"üîó YClients API –∑–∞–ø—Ä–æ—Å: {method} {url}")
        
        async with aiohttp.ClientSession() as session:
            try:
                if method == 'GET':
                    async with session.get(url, headers=headers) as response:
                        result = await response.json()
                        logger.info(f"üì• YClients API –æ—Ç–≤–µ—Ç ({response.status})")
                        return result
                elif method == 'POST':
                    async with session.post(url, headers=headers, json=data) as response:
                        result = await response.json()
                        logger.info(f"üì• YClients API –æ—Ç–≤–µ—Ç ({response.status})")
                        return result
                elif method == 'PUT':
                    async with session.put(url, headers=headers, json=data) as response:
                        result = await response.json()
                        logger.info(f"üì• YClients API –æ—Ç–≤–µ—Ç ({response.status})")
                        return result
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ YClients API: {e}")
                return {"success": False, "error": str(e)}
    
    def get_user_token(self, login, password):
        """–ü–æ–ª—É—á–∞–µ—Ç user token –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –ø—Ä–∞–≤"""
        import requests
        
        url = f"{self.base_url}/auth"
        data = {
            "login": login,
            "password": password
        }
        
        try:
            response = requests.post(url, headers=self.headers, json=data)
            result = response.json()
            if result.get('success') and result.get('data', {}).get('user_token'):
                return result['data']['user_token']
            else:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å user token: {result}")
                return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è user token: {e}")
            return None
    
    async def get_current_staff(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"""
        result = await self._make_request('GET', f'staff/{self.company_id}')
        if result.get('success') and result.get('data'):
            return result['data']
        return []
    
    async def get_current_services(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥"""
        result = await self._make_request('GET', f'services/{self.company_id}')
        if result.get('success') and result.get('data'):
            return result['data']
        return []
    
    async def get_service_categories(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —É—Å–ª—É–≥"""
        result = await self._make_request('GET', f'service_categories/{self.company_id}')
        if result.get('success') and result.get('data'):
            return result['data']
        return []
    
    async def create_service(self, service_data):
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é —É—Å–ª—É–≥—É"""
        result = await self._make_request('POST', f'company/{self.company_id}/services', service_data)
        return result
    
    async def create_staff(self, staff_data):
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
        result = await self._make_request('POST', f'staff/{self.company_id}', staff_data)
        return result
    
    async def fill_services(self):
        """–ó–∞–ø–æ–ª–Ω—è–µ—Ç —É—Å–ª—É–≥–∏ —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
        logger.info("ü¶∑ –ó–∞–ø–æ–ª–Ω—è–µ–º —É—Å–ª—É–≥–∏...")
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ª—É–≥
        categories = await self.get_service_categories()
        if not categories:
            logger.error("–ù–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π —É—Å–ª—É–≥! –°–æ–∑–¥–∞–π—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é.")
            return []
        
        category_id = categories[0]['id']  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        logger.info(f"üìã –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {categories[0]['title']} (ID: {category_id})")
        
        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —É—Å–ª—É–≥–∏
        def create_service_data(title, price_min, price_max, duration, description):
            return {
                "title": title,
                "booking_title": title,
                "category_id": category_id,
                "price_min": price_min,
                "price_max": price_max,
                "duration": duration,
                "comment": description,
                "active": 1,
                "is_multi": False,
                "tax_variant": 1,
                "vat_id": 1,
                "is_need_limit_date": False,
                "seance_search_start": 0,
                "seance_search_step": 15,
                "step": 15,
                "seance_search_finish": 1440,
                "staff": []
            }
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥ –¥–ª—è —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –∫–ª–∏–Ω–∏–∫–∏
        test_services = [
            # –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
            create_service_data("–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∞", 1500, 1500, 30, "–ü–µ—Ä–≤–∏—á–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∞ —Å –æ—Å–º–æ—Ç—Ä–æ–º –ø–æ–ª–æ—Å—Ç–∏ —Ä—Ç–∞"),
            create_service_data("–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –æ—Ä—Ç–æ–¥–æ–Ω—Ç–∞", 2000, 2000, 45, "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø—Ä–∏–∫—É—Å–∞ –∏ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—é –∑—É–±–æ–≤"),
            create_service_data("–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Ö–∏—Ä—É—Ä–≥–∞", 2500, 2500, 30, "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —á–µ–ª—é—Å—Ç–Ω–æ-–ª–∏—Ü–µ–≤–æ–≥–æ —Ö–∏—Ä—É—Ä–≥–∞"),
            create_service_data("–†–µ–Ω—Ç–≥–µ–Ω–æ–≥—Ä–∞—Ñ–∏—è –∑—É–±–∞", 800, 800, 15, "–ü—Ä–∏—Ü–µ–ª—å–Ω—ã–π —Ä–µ–Ω—Ç–≥–µ–Ω–æ–≤—Å–∫–∏–π —Å–Ω–∏–º–æ–∫ –∑—É–±–∞"),
            create_service_data("–ü–∞–Ω–æ—Ä–∞–º–Ω—ã–π —Å–Ω–∏–º–æ–∫", 2500, 2500, 20, "–û—Ä—Ç–æ–ø–∞–Ω—Ç–æ–º–æ–≥—Ä–∞–º–º–∞ - –ø–∞–Ω–æ—Ä–∞–º–Ω—ã–π —Å–Ω–∏–º–æ–∫ —á–µ–ª—é—Å—Ç–µ–π"),
            
            # –¢–µ—Ä–∞–ø–µ–≤—Ç–∏—á–µ—Å–∫–æ–µ –ª–µ—á–µ–Ω–∏–µ
            create_service_data("–õ–µ—á–µ–Ω–∏–µ –∫–∞—Ä–∏–µ—Å–∞", 3000, 5000, 60, "–õ–µ—á–µ–Ω–∏–µ –∫–∞—Ä–∏–µ—Å–∞ —Å —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π –ø–ª–æ–º–±—ã"),
            create_service_data("–õ–µ—á–µ–Ω–∏–µ –ø—É–ª—å–ø–∏—Ç–∞", 8000, 12000, 90, "–≠–Ω–¥–æ–¥–æ–Ω—Ç–∏—á–µ—Å–∫–æ–µ –ª–µ—á–µ–Ω–∏–µ –∫–æ—Ä–Ω–µ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤"),
            create_service_data("–õ–µ—á–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–æ–Ω—Ç–∏—Ç–∞", 10000, 15000, 120, "–õ–µ—á–µ–Ω–∏–µ –≤–æ—Å–ø–∞–ª–µ–Ω–∏—è —Ç–∫–∞–Ω–µ–π –≤–æ–∫—Ä—É–≥ –∫–æ—Ä–Ω—è –∑—É–±–∞"),
            create_service_data("–•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è —Ä–µ—Å—Ç–∞–≤—Ä–∞—Ü–∏—è", 8000, 15000, 90, "–≠—Å—Ç–µ—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ—Å—Ç–∞–≤—Ä–∞—Ü–∏—è –∑—É–±–∞ –∫–æ–º–ø–æ–∑–∏—Ç–Ω—ã–º–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏"),
            create_service_data("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–æ–º–±—ã", 2500, 6000, 45, "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–≤–µ—Ç–æ–≤–æ–π –ø–ª–æ–º–±—ã —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤"),
            
            # –ü—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–∞ –∏ –≥–∏–≥–∏–µ–Ω–∞
            create_service_data("–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —á–∏—Å—Ç–∫–∞ –∑—É–±–æ–≤", 4000, 4000, 45, "–£–ª—å—Ç—Ä–∞–∑–≤—É–∫–æ–≤–∞—è —á–∏—Å—Ç–∫–∞ –∑—É–±–æ–≤ –∏ –ø–æ–ª–∏—Ä–æ–≤–∫–∞"),
            create_service_data("Air Flow —á–∏—Å—Ç–∫–∞", 3500, 3500, 30, "–ß–∏—Å—Ç–∫–∞ –∑—É–±–æ–≤ –º–µ—Ç–æ–¥–æ–º Air Flow"),
            create_service_data("–§—Ç–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –∑—É–±–æ–≤", 1500, 1500, 20, "–£–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —ç–º–∞–ª–∏ —Ñ—Ç–æ—Ä—Å–æ–¥–µ—Ä–∂–∞—â–∏–º–∏ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞–º–∏"),
            create_service_data("–ì–µ—Ä–º–µ—Ç–∏–∑–∞—Ü–∏—è —Ñ–∏—Å—Å—É—Ä", 2000, 2000, 30, "–ó–∞–ø–µ—á–∞—Ç—ã–≤–∞–Ω–∏–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —É–≥–ª—É–±–ª–µ–Ω–∏–π –≤ –∑—É–±–∞—Ö"),
            
            # –•–∏—Ä—É—Ä–≥–∏—è
            create_service_data("–£–¥–∞–ª–µ–Ω–∏–µ –∑—É–±–∞ –ø—Ä–æ—Å—Ç–æ–µ", 2000, 3000, 30, "–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–¥–≤–∏–∂–Ω–æ–≥–æ –∏–ª–∏ —Ä–∞–∑—Ä—É—à–µ–Ω–Ω–æ–≥–æ –∑—É–±–∞"),
            create_service_data("–£–¥–∞–ª–µ–Ω–∏–µ –∑—É–±–∞ —Å–ª–æ–∂–Ω–æ–µ", 5000, 8000, 60, "–°–ª–æ–∂–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∑—É–±–∞ —Å —Ä–∞–∑—Ä–µ–∑–æ–º –¥–µ—Å–Ω—ã"),
            create_service_data("–£–¥–∞–ª–µ–Ω–∏–µ –∑—É–±–∞ –º—É–¥—Ä–æ—Å—Ç–∏", 8000, 12000, 90, "–£–¥–∞–ª–µ–Ω–∏–µ —Ä–µ—Ç–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∑—É–±–∞ –º—É–¥—Ä–æ—Å—Ç–∏"),
            create_service_data("–ò–º–ø–ª–∞–Ω—Ç–∞—Ü–∏—è –∑—É–±–∞", 35000, 50000, 120, "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑—É–±–Ω–æ–≥–æ –∏–º–ø–ª–∞–Ω—Ç–∞ —Å –∫–æ—Ä–æ–Ω–∫–æ–π"),
            create_service_data("–°–∏–Ω—É—Å-–ª–∏—Ñ—Ç–∏–Ω–≥", 25000, 35000, 90, "–û–ø–µ—Ä–∞—Ü–∏—è –ø–æ —É–≤–µ–ª–∏—á–µ–Ω–∏—é –æ–±—ä–µ–º–∞ –∫–æ—Å—Ç–Ω–æ–π —Ç–∫–∞–Ω–∏"),
            
            # –ü—Ä–æ—Ç–µ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ
            create_service_data("–ö–æ—Ä–æ–Ω–∫–∞ –º–µ—Ç–∞–ª–ª–æ–∫–µ—Ä–∞–º–∏—á–µ—Å–∫–∞—è", 12000, 15000, 60, "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–µ—Ç–∞–ª–ª–æ–∫–µ—Ä–∞–º–∏—á–µ—Å–∫–æ–π –∫–æ—Ä–æ–Ω–∫–∏"),
            create_service_data("–ö–æ—Ä–æ–Ω–∫–∞ –∫–µ—Ä–∞–º–∏—á–µ—Å–∫–∞—è", 18000, 25000, 60, "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–µ–ª—å–Ω–æ–∫–µ—Ä–∞–º–∏—á–µ—Å–∫–æ–π –∫–æ—Ä–æ–Ω–∫–∏"),
            create_service_data("–ö–æ—Ä–æ–Ω–∫–∞ —Ü–∏—Ä–∫–æ–Ω–∏–µ–≤–∞—è", 25000, 35000, 60, "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ—Ä–æ–Ω–∫–∏ –∏–∑ –¥–∏–æ–∫—Å–∏–¥–∞ —Ü–∏—Ä–∫–æ–Ω–∏—è"),
            create_service_data("–°—ä–µ–º–Ω—ã–π –ø—Ä–æ—Ç–µ–∑ —á–∞—Å—Ç–∏—á–Ω—ã–π", 20000, 30000, 120, "–ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ —Å—ä–µ–º–Ω–æ–≥–æ –ø—Ä–æ—Ç–µ–∑–∞"),
            create_service_data("–°—ä–µ–º–Ω—ã–π –ø—Ä–æ—Ç–µ–∑ –ø–æ–ª–Ω—ã–π", 35000, 50000, 150, "–ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Å—ä–µ–º–Ω–æ–≥–æ –ø—Ä–æ—Ç–µ–∑–∞"),
            
            # –û—Ä—Ç–æ–¥–æ–Ω—Ç–∏—è
            create_service_data("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±—Ä–µ–∫–µ—Ç–æ–≤ –º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏—Ö", 80000, 100000, 90, "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏—Ö –±—Ä–µ–∫–µ—Ç–æ–≤"),
            create_service_data("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±—Ä–µ–∫–µ—Ç–æ–≤ –∫–µ—Ä–∞–º–∏—á–µ—Å–∫–∏—Ö", 100000, 120000, 90, "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–µ—Ä–∞–º–∏—á–µ—Å–∫–∏—Ö –±—Ä–µ–∫–µ—Ç–æ–≤"),
            create_service_data("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±—Ä–µ–∫–µ—Ç–æ–≤ —Å–∞–ø—Ñ–∏—Ä–æ–≤—ã—Ö", 120000, 150000, 90, "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∞–ø—Ñ–∏—Ä–æ–≤—ã—Ö –±—Ä–µ–∫–µ—Ç–æ–≤"),
            create_service_data("–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–∫—É—Å–∞ —ç–ª–∞–π–Ω–µ—Ä–∞–º–∏", 150000, 200000, 60, "–õ–µ—á–µ–Ω–∏–µ –∫–∞–ø–∞–º–∏-—ç–ª–∞–π–Ω–µ—Ä–∞–º–∏"),
            
            # –≠—Å—Ç–µ—Ç–∏—á–µ—Å–∫–∞—è —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è
            create_service_data("–û—Ç–±–µ–ª–∏–≤–∞–Ω–∏–µ –∑—É–±–æ–≤ ZOOM", 15000, 20000, 60, "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –æ—Ç–±–µ–ª–∏–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π ZOOM"),
            create_service_data("–û—Ç–±–µ–ª–∏–≤–∞–Ω–∏–µ –∑—É–±–æ–≤ –¥–æ–º–∞—à–Ω–µ–µ", 8000, 12000, 30, "–ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ –∫–∞–ø –¥–ª—è –¥–æ–º–∞—à–Ω–µ–≥–æ –æ—Ç–±–µ–ª–∏–≤–∞–Ω–∏—è"),
            create_service_data("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–∏–Ω–∏—Ä–æ–≤", 25000, 40000, 90, "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–µ—Ä–∞–º–∏—á–µ—Å–∫–∏—Ö –≤–∏–Ω–∏—Ä–æ–≤"),
            create_service_data("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ª—é–º–∏–Ω–∏—Ä–æ–≤", 35000, 50000, 90, "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É–ª—å—Ç—Ä–∞—Ç–æ–Ω–∫–∏—Ö –ª—é–º–∏–Ω–∏—Ä–æ–≤")
        ]
        
        created_services = []
        for service in test_services:
            logger.info(f"‚ûï –°–æ–∑–¥–∞–µ–º —É—Å–ª—É–≥—É: {service['title']}")
            result = await self.create_service(service)
            if result.get('success'):
                logger.info(f"–£—Å–ª—É–≥–∞ —Å–æ–∑–¥–∞–Ω–∞: {service['title']}")
                created_services.append(result['data'])
            else:
                logger.error(f" –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É—Å–ª—É–≥–∏ {service['title']}: {result}")
        
        return created_services
    
    async def fill_staff(self):
        """–ó–∞–ø–æ–ª–Ω—è–µ—Ç –≤—Ä–∞—á–µ–π —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
        logger.info("üë®‚Äç‚öïÔ∏è –ó–∞–ø–æ–ª–Ω—è–µ–º –≤—Ä–∞—á–µ–π...")
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –≤—Ä–∞—á–∏ –¥–ª—è —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –∫–ª–∏–Ω–∏–∫–∏
        test_staff = [
            {
                "name": "–ò–≤–∞–Ω–æ–≤–∞ –ê–Ω–Ω–∞ –ü–µ—Ç—Ä–æ–≤–Ω–∞",
                "specialization": "—Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥-—Ç–µ—Ä–∞–ø–µ–≤—Ç",
                "phone": "79001234567",
                "email": "ivanova@dental.clinic",
                "position_id": 0,
                "bookable": True,
                "information": "–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥-—Ç–µ—Ä–∞–ø–µ–≤—Ç —Å –æ–ø—ã—Ç–æ–º —Ä–∞–±–æ—Ç—ã 8 –ª–µ—Ç. –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –Ω–∞ –ª–µ—á–µ–Ω–∏–∏ –∫–∞—Ä–∏–µ—Å–∞ –∏ —ç–Ω–¥–æ–¥–æ–Ω—Ç–∏–∏.",
                "rating": 4.8
            },
            {
                "name": "–ü–µ—Ç—Ä–æ–≤ –ú–∏—Ö–∞–∏–ª –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á", 
                "specialization": "—Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥-—Ö–∏—Ä—É—Ä–≥",
                "phone": "79001234568",
                "email": "petrov@dental.clinic",
                "position_id": 0,
                "bookable": True,
                "information": "–ß–µ–ª—é—Å—Ç–Ω–æ-–ª–∏—Ü–µ–≤–æ–π —Ö–∏—Ä—É—Ä–≥ —Å –æ–ø—ã—Ç–æ–º 12 –ª–µ—Ç. –ü—Ä–æ–≤–æ–¥–∏—Ç –∏–º–ø–ª–∞–Ω—Ç–∞—Ü–∏—é –∏ —Å–ª–æ–∂–Ω—ã–µ —É–¥–∞–ª–µ–Ω–∏—è.",
                "rating": 4.9
            },
            {
                "name": "–°–∏–¥–æ—Ä–æ–≤–∞ –ï–ª–µ–Ω–∞ –í–ª–∞–¥–∏–º–∏—Ä–æ–≤–Ω–∞",
                "specialization": "—Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥-–≥–∏–≥–∏–µ–Ω–∏—Å—Ç",
                "phone": "79001234569", 
                "email": "sidorova@dental.clinic",
                "position_id": 0,
                "bookable": True,
                "information": "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –≥–∏–≥–∏–µ–Ω–µ –ø–æ–ª–æ—Å—Ç–∏ —Ä—Ç–∞ –∏ –ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–µ.",
                "rating": 4.7
            },
            {
                "name": "–ö–æ–∑–ª–æ–≤ –î–º–∏—Ç—Ä–∏–π –°–µ—Ä–≥–µ–µ–≤–∏—á",
                "specialization": "—Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥-–æ—Ä—Ç–æ–ø–µ–¥",
                "phone": "79001234570",
                "email": "kozlov@dental.clinic", 
                "position_id": 0,
                "bookable": True,
                "information": "–í—Ä–∞—á-–æ—Ä—Ç–æ–ø–µ–¥, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –Ω–∞ –ø—Ä–æ—Ç–µ–∑–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏ —Ä–µ—Å—Ç–∞–≤—Ä–∞—Ü–∏–∏ –∑—É–±–æ–≤.",
                "rating": 4.6
            },
            {
                "name": "–ù–∏–∫–æ–ª–∞–µ–≤–∞ –û–ª—å–≥–∞ –ò–≥–æ—Ä–µ–≤–Ω–∞",
                "specialization": "—Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥-–ø–∞—Ä–æ–¥–æ–Ω—Ç–æ–ª–æ–≥",
                "phone": "79001234571",
                "email": "nikolaeva@dental.clinic",
                "position_id": 0, 
                "bookable": True,
                "information": "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –ª–µ—á–µ–Ω–∏—é –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π –¥–µ—Å–µ–Ω –∏ –ø–∞—Ä–æ–¥–æ–Ω—Ç–∞.",
                "rating": 4.5
            }
        ]
        
        created_staff = []
        for staff in test_staff:
            logger.info(f"‚ûï –°–æ–∑–¥–∞–µ–º –≤—Ä–∞—á–∞: {staff['name']}")
            result = await self.create_staff(staff)
            if result.get('success'):
                logger.info(f"–í—Ä–∞—á —Å–æ–∑–¥–∞–Ω: {staff['name']}")
                created_staff.append(result['data'])
            else:
                logger.error(f" –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤—Ä–∞—á–∞ {staff['name']}: {result}")
        
        return created_staff
    
    async def show_current_data(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ YClients"""
        logger.info("üìã –¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ YClients:")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
        staff = await self.get_current_staff()
        logger.info(f"üë®‚Äç‚öïÔ∏è –°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {len(staff)}")
        for s in staff:
            logger.info(f"  - {s.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} ({s.get('specialization', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')})")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ª—É–≥–∏
        services = await self.get_current_services()
        logger.info(f"ü¶∑ –£—Å–ª—É–≥: {len(services)}")
        for s in services:
            logger.info(f"  - {s.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} ({s.get('price_min', 0)}‚ÇΩ)")
    
    async def fill_all_data(self):
        """–ó–∞–ø–æ–ª–Ω—è–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º user token –µ—Å–ª–∏ –µ—Å—Ç—å –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å
            login = os.getenv("YCLIENTS_LOGIN")
            password = os.getenv("YCLIENTS_PASSWORD")
            
            if login and password:
                self.user_token = self.get_user_token(login, password)
                if self.user_token:
                    logger.info("‚úÖ User token –ø–æ–ª—É—á–µ–Ω")
                else:
                    logger.warning("‚ö†Ô∏è –†–∞–±–æ—Ç–∞–µ–º –±–µ–∑ user token (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –ø—Ä–∞–≤–∞)")
            
            logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö YClients...")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
            await self.show_current_data()
            
            # –ó–∞–ø–æ–ª–Ω—è–µ–º —É—Å–ª—É–≥–∏
            services = await self.fill_services()
            logger.info(f"–°–æ–∑–¥–∞–Ω–æ —É—Å–ª—É–≥: {len(services)}")
            
            # –ó–∞–ø–æ–ª–Ω—è–µ–º –≤—Ä–∞—á–µ–π
            staff = await self.fill_staff()
            logger.info(f"–°–æ–∑–¥–∞–Ω–æ –≤—Ä–∞—á–µ–π: {len(staff)}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            logger.info("\n" + "="*50)
            await self.show_current_data()
            
            logger.info("üéâ –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
            
        except Exception as e:
            logger.error(f" –û—à–∏–±–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
            raise

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        filler = YClientsDataFiller()
        await filler.fill_all_data()
    except Exception as e:
        logger.error(f" –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    asyncio.run(main())
