#!/usr/bin/env python3
"""
Telegram-–±–æ—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –¥–ª—è —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –∫–ª–∏–Ω–∏–∫–∏ —Å OpenAI Realtime API.
"""

import asyncio
import fcntl
import json
import logging
import os
import random
import re
import sys
import time
from datetime import datetime, timedelta
from typing import Dict, Optional, Any

from dotenv import load_dotenv
import websockets
from aiogram import Bot, Dispatcher, F, Router
from aiogram.filters import CommandStart, Command
from aiogram.types import Message
import aiohttp
from aiohttp import web

# –ò–º–ø–æ—Ä—Ç YClients –∞–¥–∞–ø—Ç–µ—Ä–∞
from src.integrations.yclients_adapter import get_yclients_adapter

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ TLS –æ—à–∏–±–æ–∫ –≤ aiohttp
class TLSErrorFilter(logging.Filter):
    """–§–∏–ª—å—Ç—Ä –¥–ª—è –ø–æ–¥–∞–≤–ª–µ–Ω–∏—è TLS handshake –æ—à–∏–±–æ–∫."""

    def filter(self, record):
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º TLS handshake –æ—à–∏–±–∫–∏
        if "Invalid method encountered" in record.getMessage():
            return False
        if "BadStatusLine" in record.getMessage():
            return False
        return True


# –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –∫ aiohttp –ª–æ–≥–≥–µ—Ä–∞–º
aiohttp_logger = logging.getLogger('aiohttp.server')
aiohttp_logger.addFilter(TLSErrorFilter())
aiohttp_access_logger = logging.getLogger('aiohttp.access')
aiohttp_access_logger.addFilter(TLSErrorFilter())

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä
router = Router()


class DoctorsCache:
    """–ö–µ—à –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—Ä–∞—á–∞—Ö —Å TTL 24 —á–∞—Å–∞."""

    def __init__(self, ttl_hours: int = 24):
        self.ttl_seconds = ttl_hours * 3600  # TTL –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        self.cache: Dict[str, Any] = {}  # key -> {"data": data, "timestamp": timestamp}

    def _is_expired(self, timestamp: float) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏—Å—Ç–µ–∫ –ª–∏ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–µ—à–∞."""
        return time.time() - timestamp > self.ttl_seconds

    def get(self, key: str) -> Optional[Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–µ—à–∞, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –∏—Å—Ç–µ–∫–ª–∏."""
        if key not in self.cache:
            return None

        cache_entry = self.cache[key]
        if self._is_expired(cache_entry["timestamp"]):
            # –£–¥–∞–ª—è–µ–º –∏—Å—Ç–µ–∫—à–∏–µ –¥–∞–Ω–Ω—ã–µ
            del self.cache[key]
            return None

        return cache_entry["data"]

    def set(self, key: str, data: Any) -> None:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –∫–µ—à —Å —Ç–µ–∫—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º."""
        self.cache[key] = {
            "data": data,
            "timestamp": time.time()
        }

    def clear(self) -> None:
        """–û—á–∏—â–∞–µ—Ç –≤–µ—Å—å –∫–µ—à."""
        self.cache.clear()

    def cleanup_expired(self) -> int:
        """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ –∏—Å—Ç–µ–∫—à–∏–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –∫–µ—à–∞. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π."""
        current_time = time.time()
        expired_keys = []

        for key, cache_entry in self.cache.items():
            if self._is_expired(cache_entry["timestamp"]):
                expired_keys.append(key)

        for key in expired_keys:
            del self.cache[key]

        return len(expired_keys)

    def get_stats(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–µ—à–∞."""
        current_time = time.time()
        valid_entries = 0
        expired_entries = 0

        for cache_entry in self.cache.values():
            if self._is_expired(cache_entry["timestamp"]):
                expired_entries += 1
            else:
                valid_entries += 1

        return {
            "total_entries": len(self.cache),
            "valid_entries": valid_entries,
            "expired_entries": expired_entries,
            "ttl_hours": self.ttl_seconds / 3600
        }


# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∫–µ—à–∏
doctors_cache = DoctorsCache(ttl_hours=24)
services_cache = DoctorsCache(ttl_hours=1)  # –ö–µ—à —É—Å–ª—É–≥ –Ω–∞ 1 —á–∞—Å


class AdminServer:
    """HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞."""

    def __init__(self, yclients_integration, port=8080):
        self.yclients = yclients_integration
        self.port = port
        self.app = web.Application()
        self._setup_routes()

    def _setup_routes(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤."""

        # –î–æ–±–∞–≤–ª—è–µ–º middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ TLS –æ—à–∏–±–æ–∫
        @web.middleware
        async def error_middleware(request, handler):
            try:
                return await handler(request)
            except Exception as e:
                # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å–µ—Ä—å–µ–∑–Ω—ã–µ –æ—à–∏–±–∫–∏, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º TLS handshake
                if "Invalid method encountered" not in str(e) and "BadStatusLine" not in str(e):
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")
                return web.Response(text="Bad Request", status=400)

        self.app.middlewares.append(error_middleware)

        self.app.router.add_get('/', self.index)
        self.app.router.add_post('/cache/clear', self.clear_cache)
        self.app.router.add_get('/cache/stats', self.cache_stats)
        self.app.router.add_post('/cache/refresh', self.refresh_cache)
        self.app.router.add_get('/health', self.health_check)

    async def index(self, request):
        """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–¥–º–∏–Ω–∫–∏."""
        html = """
        <!DOCTYPE html>
        <html>
        <head>
            <title>ü¶∑ –ê–¥–º–∏–Ω–∫–∞ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –±–æ—Ç–∞</title>
            <meta charset="utf-8">
            <style>
                body { font-family: Arial, sans-serif; margin: 20px; background: #f5f5f5; }
                .container { max-width: 800px; margin: 0 auto; background: white; padding: 20px; border-radius: 10px; }
                .button { padding: 10px 15px; margin: 5px; border: none; border-radius: 5px; cursor: pointer; }
                .btn-danger { background: #dc3545; color: white; }
                .btn-primary { background: #007bff; color: white; }
                .btn-success { background: #28a745; color: white; }
                .stats { background: #f8f9fa; padding: 15px; border-radius: 5px; margin: 10px 0; }
                .title { color: #333; border-bottom: 2px solid #007bff; padding-bottom: 10px; }
            </style>
        </head>
        <body>
            <div class="container">
                <h1 class="title">ü¶∑ –ê–¥–º–∏–Ω–∫–∞ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –±–æ—Ç–∞</h1>
                
                <div style="background: #d1ecf1; border: 1px solid #bee5eb; border-radius: 5px; padding: 10px; margin: 15px 0;">
                    <strong>‚ÑπÔ∏è –í–∞–∂–Ω–æ:</strong> –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ <code>http://localhost:8080</code> (HTTP, –Ω–µ HTTPS)
                </div>
                
                <h2>üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–µ—à–µ–º</h2>
                <button class="button btn-danger" onclick="clearCache()">üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∫–µ—à–∏</button>
                <button class="button btn-primary" onclick="refreshCache()">üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∫–µ—à–∏</button>
                <button class="button btn-success" onclick="loadStats()">üìà –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É</button>
                
                <div id="stats"></div>
                
                <h2>üîß API Endpoints</h2>
                <ul>
                    <li><code>GET /</code> - –≠—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞</li>
                    <li><code>POST /cache/clear</code> - –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∫–µ—à–∏</li>
                    <li><code>GET /cache/stats</code> - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–µ—à–µ–π</li>
                    <li><code>POST /cache/refresh</code> - –û–±–Ω–æ–≤–∏—Ç—å –∫–µ—à–∏</li>
                    <li><code>GET /health</code> - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è</li>
                </ul>
            </div>
            
            <script>
                async function clearCache() {
                    if (confirm('–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∫–µ—à–∏?')) {
                        const response = await fetch('/cache/clear', { method: 'POST' });
                        const result = await response.json();
                        alert(result.message);
                        loadStats();
                    }
                }
                
                async function refreshCache() {
                    if (confirm('–û–±–Ω–æ–≤–∏—Ç—å –∫–µ—à–∏?')) {
                        const response = await fetch('/cache/refresh', { method: 'POST' });
                        const result = await response.json();
                        alert(result.message);
                        loadStats();
                    }
                }
                
                async function loadStats() {
                    const response = await fetch('/cache/stats');
                    const stats = await response.json();
                    document.getElementById('stats').innerHTML = 
                        '<div class="stats"><h3>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–µ—à–µ–π</h3><pre>' + 
                        JSON.stringify(stats, null, 2) + '</pre></div>';
                }
                
                // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                loadStats();
                
                // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
                setInterval(loadStats, 30000);
            </script>
        </body>
        </html>
        """
        return web.Response(text=html, content_type='text/html')

    async def clear_cache(self, request):
        """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∫–µ—à–µ–π."""
        try:
            self.yclients.clear_all_cache()
            logger.info("üóëÔ∏è –í—Å–µ –∫–µ—à–∏ –æ—á–∏—â–µ–Ω—ã —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∫—É")
            return web.json_response({
                "success": True,
                "message": "–í—Å–µ –∫–µ—à–∏ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã"
            })
        except Exception as e:
            logger.error(f" –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–µ—à–µ–π —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∫—É: {e}")
            return web.json_response({
                "success": False,
                "message": f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–µ—à–µ–π: {str(e)}"
            }, status=500)

    async def cache_stats(self, request):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–µ—à–µ–π."""
        try:
            stats = self.yclients.get_all_cache_stats()
            return web.json_response({
                "success": True,
                "stats": stats,
                "timestamp": time.time()
            })
        except Exception as e:
            logger.error(f" –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–µ—à–µ–π: {e}")
            return web.json_response({
                "success": False,
                "message": f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}"
            }, status=500)

    async def refresh_cache(self, request):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–µ—à–µ–π."""
        try:
            # –ü–æ–º–µ—á–∞–µ–º –∫–µ—à–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            self.yclients.refresh_doctors_cache()
            self.yclients.refresh_services_cache()

            logger.info("üîÑ –ö–µ—à–∏ –ø–æ–º–µ—á–µ–Ω—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∫—É")
            return web.json_response({
                "success": True,
                "message": "–ö–µ—à–∏ –ø–æ–º–µ—á–µ–Ω—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è. –°–ª–µ–¥—É—é—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã –∑–∞–≥—Ä—É–∑—è—Ç —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ."
            })
        except Exception as e:
            logger.error(f" –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–µ—à–µ–π —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∫—É: {e}")
            return web.json_response({
                "success": False,
                "message": f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–µ—à–µ–π: {str(e)}"
            }, status=500)

    async def health_check(self, request):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞."""
        return web.json_response({
            "status": "healthy",
            "timestamp": time.time(),
            "uptime": time.time() - start_time if 'start_time' in globals() else 0
        })

    async def start(self):
        """–ó–∞–ø—É—Å–∫ HTTP —Å–µ—Ä–≤–µ—Ä–∞."""
        runner = web.AppRunner(self.app)
        await runner.setup()
        site = web.TCPSite(runner, 'localhost', self.port)
        await site.start()
        logger.info(f"üåê –ê–¥–º–∏–Ω–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞ –Ω–∞ http://localhost:{self.port}")
        return runner


# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–ø—É—Å–∫–∞
start_time = time.time()


class DentalRealtimeClient:
    """–ö–ª–∏–µ–Ω—Ç OpenAI Realtime API –¥–ª—è —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –∫–ª–∏–Ω–∏–∫–∏."""

    def __init__(self):
        self.api_key = os.getenv("OPENAI_API_KEY")
        self.ws_url = "wss://api.openai.com/v1/realtime?model=gpt-4o-realtime-preview"
        self.websocket = None
        self.is_connected = False
        self.active_streams: Dict[int, Dict] = {}  # user_id -> stream_data
        self.response_to_user: Dict[str, int] = {}  # response_id -> user_id
        self.completed_responses: set = set()  # response_id –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤

        # –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
        self.total_input_tokens = 0
        self.total_output_tokens = 0
        self.total_cost = 0.0

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º YClients –∞–¥–∞–ø—Ç–µ—Ä
        self.yclients = get_yclients_adapter()

    def calculate_cost(self, input_tokens: int, output_tokens: int) -> float:
        """
        –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è GPT-4o Realtime API.
        –¶–µ–Ω—ã –Ω–∞ –¥–µ–∫–∞–±—Ä—å 2024:
        - Input tokens: $2.50 / 1M tokens
        - Output tokens: $10.00 / 1M tokens
        """
        input_cost = (input_tokens / 1_000_000) * 2.50
        output_cost = (output_tokens / 1_000_000) * 10.00
        return input_cost + output_cost

    def update_token_usage(self, usage_data: dict):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—á–µ—Ç—á–∏–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤ –∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏."""
        if not usage_data:
            return

        input_tokens = usage_data.get('input_tokens', 0)
        output_tokens = usage_data.get('output_tokens', 0)

        self.total_input_tokens += input_tokens
        self.total_output_tokens += output_tokens

        session_cost = self.calculate_cost(input_tokens, output_tokens)
        self.total_cost += session_cost

        logger.info(
            f"üí∞ –¢–æ–∫–µ–Ω—ã: {input_tokens} –≤—Ö–æ–¥ + {output_tokens} –≤—ã—Ö–æ–¥ = ${session_cost:.4f} (–≤—Å–µ–≥–æ: ${self.total_cost:.4f})")

    async def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ OpenAI Realtime API."""
        try:
            logger.info("üîå –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ OpenAI Realtime API...")

            # –î–æ–±–∞–≤–ª—è–µ–º ID –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–π –∑–∞–ø–∏—Å–∏
            if service.get('id'):
                service_info["service_id"] = service.get('id')

            services.append(service_info)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
        services_cache.set(cache_key, services)
        logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(services)} —É—Å–ª—É–≥ –≤ –∫–µ—à (TTL: 1—á)")

        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        filtered_services = self._filter_services_by_category(services, category)
        return {"services": filtered_services}

    except Exception as e:
        logger.error(f" –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Å–ª—É–≥ YClients: {e}")
        raise

    def _filter_services_by_category(self, services, category):
        """–§–∏–ª—å—Ç—Ä—É–µ—Ç —É—Å–ª—É–≥–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
        if category == "–≤—Å–µ":
            return services

        filtered = []
        for service in services:
            # –ò—â–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–∏ —É—Å–ª—É–≥–∏
            search_fields = [
                service.get("name", ""),
                service.get("description", "")
            ]
            search_text = " ".join(search_fields).lower()

            if category.lower() in search_text:
                filtered.append(service)

        logger.info(f"üîç –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ {len(filtered)} —É—Å–ª—É–≥ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}'")
        return filtered

    async def get_doctors(self, specialization="–≤—Å–µ"):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Ä–∞—á–µ–π –∏–∑ YClients —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º."""
        cache_key = f"doctors_all"  # –ö–µ—à–∏—Ä—É–µ–º –≤—Å–µ—Ö –≤—Ä–∞—á–µ–π, —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –¥–µ–ª–∞–µ–º –ø–æ—Å–ª–µ

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
            cached_doctors = doctors_cache.get(cache_key)
            if cached_doctors:
                logger.info(f"üìã –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤—Ä–∞—á–µ–π (TTL: 24—á)")
                # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–∑ –∫–µ—à–∞
                filtered_doctors = self._filter_doctors_by_specialization(cached_doctors, specialization)
                return {"doctors": filtered_doctors}

            # –ö–µ—à –ø—É—Å—Ç –∏–ª–∏ –∏—Å—Ç–µ–∫, –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ API
            logger.info(f"üîÑ –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –≤—Ä–∞—á–µ–π –∏–∑ YClients API...")
            staff_data = await self.api.get_staff()
            if not staff_data or not staff_data.get('success', False):
                logger.warning(f"‚ö†Ô∏è API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {staff_data}")
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞—Ö –≤ YClients")

            if not staff_data.get('data'):
                raise Exception("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞—Ö –≤ YClients")

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –Ω–∞—à —Ñ–æ—Ä–º–∞—Ç - –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –∑–Ω–∞—á–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            doctors = []
            for staff in staff_data['data']:
                # –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                name = staff.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤—Ä–∞—á')
                position = staff.get('position', {})
                specialization_text = staff.get('specialization', '')

                # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–æ–ª–∂–Ω–æ—Å—Ç—å –∏ –æ–ø–∏—Å–∞–Ω–∏–µ
                position_title = position.get('title', '–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç') if isinstance(position, dict) else str(position)
                position_description = position.get('description', '') if isinstance(position, dict) else ''

                doctor_info = {
                    "name": name,
                    "position": position_title
                }

                # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –∏–∑ YClients
                if specialization_text and specialization_text.strip():
                    doctor_info["specialization"] = specialization_text.strip()

                # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å –∏ –Ω–µ –ø—É—Å—Ç–æ–µ
                if position_description and position_description.strip():
                    doctor_info["description"] = position_description.strip()

                doctors.append(doctor_info)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
            doctors_cache.set(cache_key, doctors)
            logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(doctors)} –≤—Ä–∞—á–µ–π –≤ –∫–µ—à (TTL: 24—á)")

            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            filtered_doctors = self._filter_doctors_by_specialization(doctors, specialization)
            return {"doctors": filtered_doctors}

        except Exception as e:
            logger.error(f" –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–∞—á–µ–π YClients: {e}")
            raise

    def _filter_doctors_by_specialization(self, doctors, specialization):
        """–§–∏–ª—å—Ç—Ä—É–µ—Ç –≤—Ä–∞—á–µ–π –ø–æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏."""
        if specialization == "–≤—Å–µ":
            return doctors

        filtered = []
        for doctor in doctors:
            # –ò—â–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –≤ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏, –æ–ø–∏—Å–∞–Ω–∏–∏ –∏–ª–∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            search_fields = [
                doctor.get("position", ""),
                doctor.get("description", ""),
                doctor.get("specialization", "")
            ]
            search_text = " ".join(search_fields).lower()

            if specialization.lower() in search_text:
                filtered.append(doctor)

        logger.info(f"üîç –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ {len(filtered)} –≤—Ä–∞—á–µ–π –ø–æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ '{specialization}'")
        return filtered

    def clear_doctors_cache(self):
        """–û—á–∏—â–∞–µ—Ç –∫–µ—à –≤—Ä–∞—á–µ–π."""
        doctors_cache.clear()
        logger.info("üóëÔ∏è –ö–µ—à –≤—Ä–∞—á–µ–π –æ—á–∏—â–µ–Ω")

    def get_cache_stats(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–µ—à–∞ –≤—Ä–∞—á–µ–π."""
        return doctors_cache.get_stats()

    def refresh_doctors_cache(self):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∫–µ—à –≤—Ä–∞—á–µ–π (—É–¥–∞–ª—è–µ—Ç —Ç–µ–∫—É—â–∏–π –∫–µ—à)."""
        cache_key = "doctors_all"
        if cache_key in doctors_cache.cache:
            del doctors_cache.cache[cache_key]
            logger.info("üîÑ –ö–µ—à –≤—Ä–∞—á–µ–π –ø–æ–º–µ—á–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")

    def clear_services_cache(self):
        """–û—á–∏—â–∞–µ—Ç –∫–µ—à —É—Å–ª—É–≥."""
        services_cache.clear()
        logger.info("üóëÔ∏è –ö–µ—à —É—Å–ª—É–≥ –æ—á–∏—â–µ–Ω")

    def get_services_cache_stats(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–µ—à–∞ —É—Å–ª—É–≥."""
        return services_cache.get_stats()

    def refresh_services_cache(self):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∫–µ—à —É—Å–ª—É–≥ (—É–¥–∞–ª—è–µ—Ç —Ç–µ–∫—É—â–∏–π –∫–µ—à)."""
        cache_key = "services_all"
        if cache_key in services_cache.cache:
            del services_cache.cache[cache_key]
            logger.info("üîÑ –ö–µ—à —É—Å–ª—É–≥ –ø–æ–º–µ—á–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")

    def clear_all_cache(self):
        """–û—á–∏—â–∞–µ—Ç –≤—Å–µ –∫–µ—à–∏."""
        self.clear_doctors_cache()
        self.clear_services_cache()
        logger.info("üóëÔ∏è –í—Å–µ –∫–µ—à–∏ –æ—á–∏—â–µ–Ω—ã")

    def get_all_cache_stats(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—Å–µ—Ö –∫–µ—à–µ–π."""
        return {
            "doctors_cache": self.get_cache_stats(),
            "services_cache": self.get_services_cache_stats()
        }

    async def search_appointments(self, service, doctor=None, date=None):
        """–ù–∞–π—Ç–∏ —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã —á–µ—Ä–µ–∑ YClients API."""
        try:
            logger.info(f"üìÖ –ü–æ–∏—Å–∫ —Å–ª–æ—Ç–æ–≤ —á–µ—Ä–µ–∑ YClients API: service={service}, doctor={doctor}, date={date}")

            from datetime import datetime, timedelta

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—É –ø–æ–∏—Å–∫–∞
            if date:
                try:
                    # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
                    if len(date) == 10:  # YYYY-MM-DD
                        search_date = datetime.strptime(date, "%Y-%m-%d")
                    else:  # –¥—Ä—É–≥–∏–µ —Ñ–æ—Ä–º–∞—Ç—ã
                        search_date = datetime.now() + timedelta(days=1)
                except:
                    search_date = datetime.now() + timedelta(days=1)
            else:
                search_date = datetime.now() + timedelta(days=1)

            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Ä–∞—á–µ–π –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ
            staff_response = await self.api.get_staff()
            if not staff_response.get('success') or not staff_response.get('data'):
                logger.error(" –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Ä–∞—á–µ–π")
                return {"appointments": []}

            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–¥—Ö–æ–¥—è—â–µ–π
            services_response = await self.api.get_services()
            if not services_response.get('success') or not services_response.get('data'):
                logger.error(" –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥")
                return {"appointments": []}

            # –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –≤—Ä–∞—á–∞ (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)
            target_staff = None
            staff_list = staff_response['data']

            if doctor:
                for staff in staff_list:
                    staff_name = staff.get('name', '').lower()
                    if doctor.lower() in staff_name:
                        target_staff = staff
                        logger.info(f"üë®‚Äç‚öïÔ∏è –ù–∞–π–¥–µ–Ω –≤—Ä–∞—á: {staff.get('name')} (ID: {staff.get('id')})")
                        break

            # –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â—É—é —É—Å–ª—É–≥—É
            target_service = None
            services_list = services_response['data']

            if service:
                for srv in services_list:
                    service_title = srv.get('title', '').lower()
                    if service.lower() in service_title:
                        target_service = srv
                        logger.info(f"üîß –ù–∞–π–¥–µ–Ω–∞ —É—Å–ª—É–≥–∞: {srv.get('title')} (ID: {srv.get('id')})")
                        break

            # –°–æ–±–∏—Ä–∞–µ–º —Å–ª–æ—Ç—ã
            slots = []

            # –ï—Å–ª–∏ –≤—Ä–∞—á —É–∫–∞–∑–∞–Ω - –∏—â–µ–º —Å–ª–æ—Ç—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ–≥–æ
            if target_staff:
                staff_to_check = [target_staff]
            else:
                # –ò–Ω–∞—á–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ—Ö –≤—Ä–∞—á–µ–π
                staff_to_check = staff_list[:5]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏

            # –ò—â–µ–º —Å–ª–æ—Ç—ã –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π
            for day_offset in range(3):  # 3 –¥–Ω—è
                current_date = search_date + timedelta(days=day_offset)
                date_str = current_date.strftime('%Y-%m-%d')

                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
                if current_date.weekday() == 6:
                    continue

                for staff in staff_to_check:
                    staff_id = staff.get('id')
                    staff_name = staff.get('name', '–í—Ä–∞—á')

                    try:
                        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã –¥–ª—è –≤—Ä–∞—á–∞ –Ω–∞ —ç—Ç—É –¥–∞—Ç—É
                        times_response = await self.api.get_available_times(staff_id, date_str)

                        if times_response.get('success') and times_response.get('data'):
                            times_data = times_response['data']

                            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç API
                            if isinstance(times_data, list):
                                for time_slot in times_data:
                                    if isinstance(time_slot, dict):
                                        time_str = time_slot.get('time', '')
                                        if time_str:
                                            datetime_str = f"{date_str} {time_str}"
                                            slots.append({
                                                "datetime": datetime_str,
                                                "doctor": staff_name,
                                                "staff_id": staff_id,
                                                "service_id": target_service.get('id') if target_service else None,
                                                "available": True
                                            })
                            elif isinstance(times_data, dict) and 'times' in times_data:
                                for time_str in times_data['times']:
                                    datetime_str = f"{date_str} {time_str}"
                                    slots.append({
                                        "datetime": datetime_str,
                                        "doctor": staff_name,
                                        "staff_id": staff_id,
                                        "service_id": target_service.get('id') if target_service else None,
                                        "available": True
                                    })

                        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ—Ç–æ–≤ –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                        if len(slots) >= 12:
                            break

                    except Exception as e:
                        logger.error(f" –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–æ—Ç–æ–≤ –¥–ª—è –≤—Ä–∞—á–∞ {staff_name}: {e}")
                        continue

                if len(slots) >= 12:
                    break

            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(slots)} —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ —á–µ—Ä–µ–∑ YClients API")
            return {"appointments": slots}

        except Exception as e:
            logger.error(f" –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å–ª–æ—Ç–æ–≤ —á–µ—Ä–µ–∑ YClients API: {e}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –≤–º–µ—Å—Ç–æ –ø–∞–¥–µ–Ω–∏—è
            return {"appointments": []}

    async def book_appointment(self, patient_name, phone, service, doctor, datetime_str, comment=""):
        """–ó–∞–ø–∏—Å–∞—Ç—å –Ω–∞ –ø—Ä–∏–µ–º –≤ YClients —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ API."""
        try:
            logger.info(f"üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏: {patient_name}, {service}, {doctor}, {datetime_str}")

            # 1. –ù–∞–π—Ç–∏ –≤—Ä–∞—á–∞ –ø–æ –∏–º–µ–Ω–∏
            staff_data = await self.api.get_staff()
            if not staff_data.get('data'):
                raise Exception("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤—Ä–∞—á–µ–π –≤ YClients")

            staff_id = None
            for staff_member in staff_data['data']:
                staff_name = staff_member.get('name', '').lower()
                if doctor.lower() in staff_name or staff_name in doctor.lower():
                    staff_id = staff_member.get('id')
                    logger.info(f"–ù–∞–π–¥–µ–Ω –≤—Ä–∞—á: {staff_member.get('name')} (ID: {staff_id})")
                    break

            if not staff_id:
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –∏–º–µ–Ω–∏, –±–µ—Ä–µ–º –ø–µ—Ä–≤–æ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ
                staff_id = staff_data['data'][0].get('id')
                logger.warning(f"‚ö†Ô∏è –í—Ä–∞—á '{doctor}' –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤–æ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ (ID: {staff_id})")

            # 2. –ù–∞–π—Ç–∏ —É—Å–ª—É–≥—É –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
            services_data = await self.api.get_services(staff_id=staff_id)
            if not services_data.get('data'):
                raise Exception("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å–ª—É–≥ –≤ YClients")

            service_id = None
            for svc in services_data['data']:
                service_name = svc.get('title', '').lower()
                if service.lower() in service_name or service_name in service.lower():
                    service_id = svc.get('id')
                    logger.info(f"–ù–∞–π–¥–µ–Ω–∞ —É—Å–ª—É–≥–∞: {svc.get('title')} (ID: {service_id})")
                    break

            if not service_id:
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é, –±–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é
                service_id = services_data['data'][0].get('id')
                logger.warning(f"‚ö†Ô∏è –£—Å–ª—É–≥–∞ '{service}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é (ID: {service_id})")

            # 3. –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç ISO 8601
            try:
                # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –≤—Ö–æ–¥—è—â–µ–π –¥–∞—Ç—ã
                if 'T' in datetime_str:
                    # –£–∂–µ –≤ ISO —Ñ–æ—Ä–º–∞—Ç–µ
                    iso_datetime = datetime_str
                    if not iso_datetime.endswith('+03:00') and not iso_datetime.endswith('Z'):
                        iso_datetime += '+03:00'
                else:
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ "YYYY-MM-DD HH:MM"
                    dt = datetime.strptime(datetime_str, "%Y-%m-%d %H:%M")
                    iso_datetime = dt.strftime("%Y-%m-%dT%H:%M:%S+03:00")

                logger.info(f"üìÖ –í—Ä–µ–º—è –≤ ISO —Ñ–æ—Ä–º–∞—Ç–µ: {iso_datetime}")
            except Exception as date_error:
                logger.error(f" –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã '{datetime_str}': {date_error}")
                raise Exception(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: {datetime_str}")

            # 4. –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å —Å –Ω–æ–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º API
            result = await self.api.book(
                fullname=patient_name,
                phone=phone,
                email="",
                comment=comment,
                datetime_str=iso_datetime,
                service_id=service_id,
                staff_id=staff_id
            )

            logger.info(f"üì§ –û—Ç–≤–µ—Ç –æ—Ç YClients API: {result}")

            if result.get('success'):
                logger.info(f"–ó–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞ –≤ YClients: {patient_name}")

                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º data –∫–∞–∫ —Å–ø–∏—Å–æ–∫ (–Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç API)
                data_list = result.get('data', [])
                if data_list and len(data_list) > 0:
                    appointment_id = str(data_list[0].get('record_id', f"YC_{int(datetime.now().timestamp())}"))
                else:
                    appointment_id = f"YC_{int(datetime.now().timestamp())}"

                return {
                    "success": True,
                    "appointment_id": appointment_id,
                    "message": "–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!",
                    "details": {
                        "doctor": doctor,
                        "service": service,
                        "datetime": iso_datetime
                    }
                }
            else:
                error_message = result.get('meta', {}).get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                errors = result.get('meta', {}).get('errors', {})
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å: {error_message}, errors: {errors}")
                return {"success": False, "message": f"{error_message}. –î–µ—Ç–∞–ª–∏: {errors}"}

        except Exception as e:
            logger.error(f" –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ YClients: {e}")
            return {"success": False, "message": f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏: {str(e)}"}


class DentalRealtimeClient:
    """–ö–ª–∏–µ–Ω—Ç OpenAI Realtime API –¥–ª—è —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –∫–ª–∏–Ω–∏–∫–∏."""

    def __init__(self):
        self.api_key = os.getenv("OPENAI_API_KEY")
        self.ws_url = "wss://api.openai.com/v1/realtime?model=gpt-4o-realtime-preview"
        self.websocket = None
        self.is_connected = False
        self.active_streams: Dict[int, Dict] = {}  # user_id -> stream_data
        self.response_to_user: Dict[str, int] = {}  # response_id -> user_id
        self.completed_responses: set = set()  # response_id –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤

        # –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
        self.total_input_tokens = 0
        self.total_output_tokens = 0
        self.total_cost = 0.0

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º YClients –∞–¥–∞–ø—Ç–µ—Ä
        self.yclients = get_yclients_adapter()

    def calculate_cost(self, input_tokens: int, output_tokens: int) -> float:
        """
        –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è GPT-4o Realtime API.
        –¶–µ–Ω—ã –Ω–∞ –¥–µ–∫–∞–±—Ä—å 2024:
        - Input tokens: $2.50 / 1M tokens
        - Output tokens: $10.00 / 1M tokens
        """
        input_cost = (input_tokens / 1_000_000) * 2.50
        output_cost = (output_tokens / 1_000_000) * 10.00
        return input_cost + output_cost

    def update_token_usage(self, usage_data: dict):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—á–µ—Ç—á–∏–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤ –∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏."""
        if not usage_data:
            return

        input_tokens = usage_data.get('input_tokens', 0)
        output_tokens = usage_data.get('output_tokens', 0)

        self.total_input_tokens += input_tokens
        self.total_output_tokens += output_tokens

        session_cost = self.calculate_cost(input_tokens, output_tokens)
        self.total_cost += session_cost

        logger.info(
            f"üí∞ –¢–æ–∫–µ–Ω—ã: {input_tokens} –≤—Ö–æ–¥ + {output_tokens} –≤—ã—Ö–æ–¥ = ${session_cost:.4f} (–≤—Å–µ–≥–æ: ${self.total_cost:.4f})")

    async def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ OpenAI Realtime API."""
        try:
            logger.info("üîå –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ OpenAI Realtime API...")

            headers = {
                "Authorization": f"Bearer {self.api_key}",
                "OpenAI-Beta": "realtime=v1"
            }

            self.websocket = await websockets.connect(
                self.ws_url,
                extra_headers=headers,
                ping_interval=20,
                ping_timeout=10
            )

            self.is_connected = True
            logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ OpenAI Realtime API —É—Å–ø–µ—à–Ω–æ!")

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é
            await self.initialize_session()

            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π
            asyncio.create_task(self.listen_events())

        except Exception as e:
            logger.error(f" –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ OpenAI: {e}")
            self.is_connected = False
            raise

    async def initialize_session(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏ —Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –∫–ª–∏–Ω–∏–∫–∏."""

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–ª–∏–Ω–∏–∫–æ–π –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ OpenAI Realtime API
        tools = [
            {
                "type": "function",
                "name": "get_services",
                "description": "–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –∫–ª–∏–Ω–∏–∫–∏ —Å —Ü–µ–Ω–∞–º–∏",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "category": {
                            "type": "string",
                            "description": "–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ª—É–≥",
                            "enum": ["—Ç–µ—Ä–∞–ø–∏—è", "—Ö–∏—Ä—É—Ä–≥–∏—è", "–æ—Ä—Ç–æ–ø–µ–¥–∏—è", "–æ—Ä—Ç–æ–¥–æ–Ω—Ç–∏—è", "–∏–º–ø–ª–∞–Ω—Ç–∞—Ü–∏—è", "–ø—Ä–æ—Ñ–≥–∏–≥–∏–µ–Ω–∞",
                                     "–≤—Å–µ"]
                        }
                    }
                }
            },
            {
                "type": "function",
                "name": "get_doctors",
                "description": "–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Ä–∞—á–µ–π –∫–ª–∏–Ω–∏–∫–∏",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "specialization": {
                            "type": "string",
                            "description": "–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Ä–∞—á–∞",
                            "enum": ["—Ç–µ—Ä–∞–ø–µ–≤—Ç", "—Ö–∏—Ä—É—Ä–≥", "–æ—Ä—Ç–æ–ø–µ–¥", "–æ—Ä—Ç–æ–¥–æ–Ω—Ç", "–∏–º–ø–ª–∞–Ω—Ç–æ–ª–æ–≥", "–≥–∏–≥–∏–µ–Ω–∏—Å—Ç", "–≤—Å–µ"]
                        }
                    }
                }
            },
            {
                "type": "function",
                "name": "search_appointments",
                "description": "–ù–∞–π—Ç–∏ —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã –¥–ª—è –∑–∞–ø–∏—Å–∏",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "service": {
                            "type": "string",
                            "description": "–ù–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏"
                        },
                        "doctor": {
                            "type": "string",
                            "description": "–ò–º—è –≤—Ä–∞—á–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"
                        },
                        "date": {
                            "type": "string",
                            "description": "–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–∞—è –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD"
                        }
                    },
                    "required": ["service"]
                }
            },
            {
                "type": "function",
                "name": "book_appointment",
                "description": "–ó–∞–ø–∏—Å–∞—Ç—å –ø–∞—Ü–∏–µ–Ω—Ç–∞ –Ω–∞ –ø—Ä–∏–µ–º",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "patient_name": {
                            "type": "string",
                            "description": "–ò–º—è –ø–∞—Ü–∏–µ–Ω—Ç–∞"
                        },
                        "phone": {
                            "type": "string",
                            "description": "–¢–µ–ª–µ—Ñ–æ–Ω –ø–∞—Ü–∏–µ–Ω—Ç–∞"
                        },
                        "service": {
                            "type": "string",
                            "description": "–£—Å–ª—É–≥–∞"
                        },
                        "doctor": {
                            "type": "string",
                            "description": "–í—Ä–∞—á"
                        },
                        "datetime": {
                            "type": "string",
                            "description": "–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏"
                        }
                    },
                    "required": ["patient_name", "phone", "service", "doctor", "datetime"]
                }
            }
        ]

        session_event = {
            "type": "session.update",
            "session": {
                "modalities": ["text"],
                "instructions": """–¢—ã - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –∫–ª–∏–Ω–∏–∫–∏ "–ë–µ–ª—ã–µ –∑—É–±—ã". 

–¢–í–û–Ø –†–û–õ–¨:
- –ü–æ–º–æ–≥–∞–µ—à—å –ø–∞—Ü–∏–µ–Ω—Ç–∞–º —Å –∑–∞–ø–∏—Å—å—é –Ω–∞ –ø—Ä–∏–µ–º
- –ö–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–µ—à—å –ø–æ —É—Å–ª—É–≥–∞–º –∏ —Ü–µ–Ω–∞–º
- –û—Ç–≤–µ—á–∞–µ—à—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –ª–µ—á–µ–Ω–∏–∏
- –í—Å–µ–≥–¥–∞ –≤–µ–∂–ª–∏–≤ –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–µ–Ω

–í–ê–ñ–ù–´–ï –ü–†–ê–í–ò–õ–ê:
1. –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —É—Å–ª—É–≥–∞—Ö, –≤—Ä–∞—á–∞—Ö –∏ –∑–∞–ø–∏—Å–∏ –í–°–ï–ì–î–ê –∏—Å–ø–æ–ª—å–∑—É–π –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
2. –ù–ò–ö–û–ì–î–ê –Ω–µ –≤—ã–¥—É–º—ã–≤–∞–π —Ü–µ–Ω—ã, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–∞—á–∞—Ö
3. –ï—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, —á–µ—Å—Ç–Ω–æ —Å–æ–æ–±—â–∏ –æ–± —ç—Ç–æ–º
4. –ë—É–¥—å –∫—Ä–∞—Ç–æ–∫ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω - –∏—Å–ø–æ–ª—å–∑—É–π —Å–ø–∏—Å–∫–∏ –∏ —ç–º–æ–¥–∑–∏
5. –ü—Ä–∏ –∑–∞–ø–∏—Å–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É—Ç–æ—á–Ω–∏ –∏–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω –ø–∞—Ü–∏–µ–Ω—Ç–∞
6. –ü—Ä–µ–¥–ª–∞–≥–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è: "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è", "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ü–µ–Ω—ã", "–í—ã–±—Ä–∞—Ç—å –≤—Ä–∞—á–∞"

–°–¢–ò–õ–¨ –û–ë–©–ï–ù–ò–Ø:
- –î—Ä—É–∂–µ–ª—é–±–Ω—ã–π, –Ω–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π
- –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏: ü¶∑ üòä üìÖ üí∞ üë®‚Äç‚öïÔ∏è üìã
- –û–±—Ä–∞—â–∞–π—Å—è –Ω–∞ "–í—ã"
- –ó–∞–≤–µ—Ä—à–∞–π —Å–æ–æ–±—â–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–º –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –¥–µ–π—Å—Ç–≤–∏—è

–ü–†–ò–ú–ï–†–´ –•–û–†–û–®–ò–• –û–¢–í–ï–¢–û–í:
"–ü–æ–∫–∞–∂—É –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –Ω–∞ –ª–µ—á–µ–Ω–∏–µ:
ü¶∑ –õ–µ—á–µ–Ω–∏–µ –∫–∞—Ä–∏–µ—Å–∞: –æ—Ç 3500‚ÇΩ
üßΩ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —á–∏—Å—Ç–∫–∞: 4500‚ÇΩ  
üíé –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–æ–º–±—ã: –æ—Ç 2800‚ÇΩ

üìÖ –•–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º –∫ –≤—Ä–∞—á—É?"

"–ù–∞—à–µ–ª —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã:
üë®‚Äç‚öïÔ∏è –ó–∞–≤—Ç—Ä–∞ 10:00 - –ò–≤–∞–Ω–æ–≤ –ò.–ò. (—Ç–µ—Ä–∞–ø–µ–≤—Ç)
üë©‚Äç‚öïÔ∏è –ó–∞–≤—Ç—Ä–∞ 14:30 - –ü–µ—Ç—Ä–æ–≤–∞ –ê.–°. (—Ç–µ—Ä–∞–ø–µ–≤—Ç)  

–ö–∞–∫–æ–µ –≤—Ä–µ–º—è –í–∞–º —É–¥–æ–±–Ω–æ?"

–û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ (–¥–æ 1200 —Å–∏–º–≤–æ–ª–æ–≤) –∏ –≤—Å–µ–≥–¥–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–π —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥.""",
                "voice": "alloy",
                "input_audio_format": "pcm16",
                "output_audio_format": "pcm16",
                "turn_detection": {
                    "type": "server_vad",
                    "threshold": 0.5,
                    "prefix_padding_ms": 300,
                    "silence_duration_ms": 200
                },
                "tools": tools,
                "tool_choice": "auto",
                "temperature": 0.7,
                "max_response_output_tokens": 1000
            }
        }

        await self.send_event(session_event)
        logger.info("üìã –°–µ—Å—Å–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –∫–ª–∏–Ω–∏–∫–∏")

    async def send_event(self, event):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è –≤ WebSocket."""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        if not self.websocket or self.websocket.closed or not self.is_connected:
            logger.warning("‚ö†Ô∏è WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, –ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è...")
            try:
                await self.connect()
            except Exception as e:
                logger.error(f" –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è: {e}")
                raise ConnectionError("WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")

        json_data = json.dumps(event, ensure_ascii=False)
        await self.websocket.send(json_data)
        logger.debug(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {event.get('type', 'unknown')}")

    async def listen_events(self):
        """–ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–±—ã—Ç–∏–π."""
        try:
            async for message in self.websocket:
                try:
                    event_data = json.loads(message)
                    await self.handle_event(event_data)
                except json.JSONDecodeError as e:
                    logger.error(f" –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
                except Exception as e:
                    logger.error(f" –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è: {e}")

        except websockets.exceptions.ConnectionClosed:
            logger.warning("‚ö†Ô∏è WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
            self.is_connected = False
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
            await asyncio.sleep(5)
            try:
                logger.info("üîÑ –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è...")
                await self.connect()
            except Exception as reconnect_error:
                logger.error(f" –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è: {reconnect_error}")

        except Exception as e:
            logger.error(f" –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–∏: {e}")
            self.is_connected = False

    async def handle_event(self, event_data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–±—ã—Ç–∏–π."""
        event_type = event_data.get("type")

        # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –¥–ª—è –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
        if event_type in ["response.created", "response.done", "error"]:
            logger.info(f"üîç –î–µ—Ç–∞–ª–∏ —Å–æ–±—ã—Ç–∏—è {event_type}: {event_data}")

        if event_type == "session.updated":
            logger.info("‚úÖ –°–µ—Å—Å–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞")

        elif event_type == "response.created":
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤—è–∑—å –º–µ–∂–¥—É OpenAI response_id –∏ user_id
            openai_response_id = event_data.get("response", {}).get("id")
            if openai_response_id and self.active_streams:
                # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π —Å—Ç—Ä–∏–º (–∫–æ—Ç–æ—Ä—ã–π —Ç–æ–ª—å–∫–æ —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å)
                for user_id, stream_data in self.active_streams.items():
                    if not stream_data.get("completed", False):
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º OpenAI response_id –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        self.response_to_user[openai_response_id] = user_id
                        logger.info(f"üîó –°–≤—è–∑–∞–ª–∏ OpenAI response_id {openai_response_id} —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
                        break

        elif event_type == "response.text.delta":
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–∏–º–∏–Ω–≥ —Ç–µ–∫—Å—Ç–∞
            delta = event_data.get("delta", "")
            response_id = event_data.get("response_id")

            # –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç–∏–≤–Ω—ã–π —Å—Ç—Ä–∏–º
            user_id = None
            if response_id and response_id in self.response_to_user:
                user_id = self.response_to_user[response_id]
            elif not response_id and self.active_streams:
                # –ï—Å–ª–∏ response_id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π —Å—Ç—Ä–∏–º
                user_id = next(iter(self.active_streams.keys()))
                logger.debug(f"‚ö†Ô∏è response.text.delta –±–µ–∑ response_id, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

            if user_id and user_id in self.active_streams:
                stream_data = self.active_streams[user_id]

                stream_data["accumulated_text"] += delta
                logger.debug(f"üìù –ù–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {stream_data['accumulated_text'][:100]}...")

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
                current_time = asyncio.get_event_loop().time()
                last_update = stream_data.get("last_update", 0)

                # –†–∞–∑—É–º–Ω—ã–π throttling –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è Telegram rate limits
                should_update = (
                        current_time - last_update > 0.3 or  # –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫—Å–∏–º—É–º –∫–∞–∂–¥—ã–µ 300ms
                        len(delta) > 10 or  # –ò–ª–∏ –µ—Å–ª–∏ –¥–µ–ª—å—Ç–∞ –±–æ–ª—å—à–µ 10 —Å–∏–º–≤–æ–ª–æ–≤
                        delta.endswith(('.', '!', '?', '\n'))
                # –ò–ª–∏ –µ—Å–ª–∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ/–∞–±–∑–∞—Ü (—É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã)
                )

                if should_update:
                    stream_data["last_update"] = current_time
                    if hasattr(self, 'update_message') and self.update_message:
                        logger.debug(f"üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                        asyncio.create_task(self.update_message(user_id, stream_data["accumulated_text"]))
                    else:
                        logger.warning("‚ö†Ô∏è update_message –∫–æ–ª–ª–±–µ–∫ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π —Å—Ç—Ä–∏–º –¥–ª—è response.text.delta (response_id: {response_id})")

        elif event_type == "response.text.done":
            # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
            text = event_data.get("text", "")
            response_id = event_data.get("response_id")

            logger.info(f"–¢–µ–∫—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: {text}... –¥–ª—è response_id: {response_id}")

            # –ü–æ–º–µ—á–∞–µ–º response –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π
            if response_id:
                self.completed_responses.add(response_id)

                # –ë–µ—Ä–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Å—Ç—Ä–∏–º
                if response_id in self.response_to_user:
                    user_id = self.response_to_user[response_id]
                    if user_id in self.active_streams:
                        stream_data = self.active_streams[user_id]
                        stream_data["accumulated_text"] = text
                        stream_data["completed"] = True

                        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–µ–π
                        # —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –≤–µ—Å—å –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
                        if hasattr(self, 'update_message') and self.update_message:
                            logger.info(f"üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                            asyncio.create_task(self.update_message(user_id, text))
                            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–µ–π
                            await asyncio.sleep(0.1)

                        if hasattr(self, 'finalize_message') and self.finalize_message:
                            asyncio.create_task(self.finalize_message(user_id, text))
                        else:
                            logger.warning("‚ö†Ô∏è finalize_message –∫–æ–ª–ª–±–µ–∫ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            else:
                # –ï—Å–ª–∏ response_id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∞–∫—Ç–∏–≤–Ω—ã–π —Å—Ç—Ä–∏–º –∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å –µ–≥–æ
                logger.warning(f"‚ö†Ô∏è response.text.done –±–µ–∑ response_id, —Ç–µ–∫—Å—Ç: {text[:50]}...")
                if self.active_streams:
                    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π (–∏ –≤–µ—Ä–æ—è—Ç–Ω–æ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π) –∞–∫—Ç–∏–≤–Ω—ã–π —Å—Ç—Ä–∏–º
                    user_id = next(iter(self.active_streams.keys()))
                    stream_data = self.active_streams[user_id]
                    stream_response_id = stream_data.get("response_id")

                    if stream_response_id:
                        self.completed_responses.add(stream_response_id)
                        logger.info(f"–ü–æ–º–µ—á–µ–Ω –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π: {stream_response_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

                    stream_data["accumulated_text"] = text
                    stream_data["completed"] = True
                    if hasattr(self, 'finalize_message') and self.finalize_message:
                        asyncio.create_task(self.finalize_message(user_id, text))
                    else:
                        logger.warning("‚ö†Ô∏è finalize_message –∫–æ–ª–ª–±–µ–∫ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

        elif event_type == "response.done":
            # –û–±—â–µ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ response
            response_id = event_data.get("response_id")
            response_data = event_data.get("response", {})

            # –ï—Å–ª–∏ response_id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ event_data, –±–µ—Ä–µ–º –∏–∑ response
            if not response_id:
                response_id = response_data.get("id")

            status = response_data.get("status")
            status_details = response_data.get("status_details", {})

            logger.info(f"üèÅ Response –∑–∞–≤–µ—Ä—à–µ–Ω: {response_id}, —Å—Ç–∞—Ç—É—Å: {status}")
            logger.debug(f"üîç –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ response.done: {event_data}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –ª–∏ response —Å –æ—à–∏–±–∫–æ–π
            if status == "failed":
                error_info = status_details.get("error", {})
                error_type = error_info.get("type", "unknown")
                error_message = error_info.get("message", "Unknown error")

                logger.error(f" Response –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–æ–π: {error_type} - {error_message}")

                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏
                if error_type == "insufficient_quota":
                    logger.error("üí≥ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ü—Ä–µ–≤—ã—à–µ–Ω–∞ –∫–≤–æ—Ç–∞ OpenAI API!")
                    logger.error("üîß –†–µ—à–µ–Ω–∏–µ: –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –Ω–∞ https://platform.openai.com/usage")

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
                    for user_id, stream_data in self.active_streams.items():
                        if hasattr(self, 'send_quota_error_message'):
                            asyncio.create_task(self.send_quota_error_message(user_id))

                # –ü–æ–º–µ—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ response –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ
                for user_id, stream_data in self.active_streams.items():
                    stream_response_id = stream_data.get("response_id")
                    if stream_response_id:
                        self.completed_responses.add(stream_response_id)
                        logger.info(
                            f"–ü–æ–º–µ—á–µ–Ω –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π (–æ—à–∏–±–∫–∞): {stream_response_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

            else:
                # –û–±—ã—á–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ response - –∏–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
                output = response_data.get("output", [])
                final_text = ""

                # –ò—â–µ–º —Ç–µ–∫—Å—Ç –≤ output
                for item in output:
                    if item.get("type") == "message" and item.get("role") == "assistant":
                        content = item.get("content", [])
                        for content_part in content:
                            if content_part.get("type") == "text":
                                final_text = content_part.get("text", "")
                                break
                        if final_text:
                            break

                logger.info(f"üìù –ò–∑–≤–ª–µ—á–µ–Ω —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–∑ response.done: '{final_text[:100]}...'")

                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–∞—Ö –∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
                usage_data = response_data.get("usage")
                if usage_data:
                    self.update_token_usage(usage_data)

                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∏–º–æ–≤
                # OpenAI –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–≤–æ–π response_id, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –Ω–∞—à–∏–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º
                # –ü–æ—ç—Ç–æ–º—É –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç—Ä–∏–º—ã
                if self.active_streams and final_text:
                    logger.info(f"üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ response –¥–ª—è {len(self.active_streams)} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∏–º–æ–≤")

                    for user_id, stream_data in list(self.active_streams.items()):
                        # –ü–æ–º–µ—á–∞–µ–º –Ω–∞—à –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π response_id –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π
                        internal_response_id = stream_data.get("response_id")
                        if internal_response_id:
                            self.completed_responses.add(internal_response_id)

                        # –¢–∞–∫–∂–µ –ø–æ–º–µ—á–∞–µ–º OpenAI response_id –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π
                        if response_id:
                            self.completed_responses.add(response_id)

                        logger.info(
                            f"–ü–æ–º–µ—á–µ–Ω –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π: {internal_response_id} (OpenAI: {response_id}) –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–æ –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ response.text.done
                        finalized = stream_data.get("finalized", False)

                        if not finalized:
                            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å response.text.done
                            await asyncio.sleep(0.01)
                            finalized = stream_data.get("finalized", False)  # –ü–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—è–µ–º

                        if not finalized:
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (fallback –µ—Å–ª–∏ response.text.done –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª)
                            logger.info(
                                f"üì§ –°–æ–æ–±—â–µ–Ω–∏–µ –µ—â–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –≤—ã–∑—ã–≤–∞–µ–º finalize_message –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                            stream_data["accumulated_text"] = final_text
                            stream_data["completed"] = True
                            if hasattr(self, 'finalize_message') and self.finalize_message:
                                asyncio.create_task(self.finalize_message(user_id, final_text))
                            else:
                                logger.warning("‚ö†Ô∏è finalize_message –∫–æ–ª–ª–±–µ–∫ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                        else:
                            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}, —Ç–æ–ª—å–∫–æ –æ—á–∏—â–∞–µ–º —Å—Ç—Ä–∏–º")

                        # –ù–ï –æ—á–∏—â–∞–µ–º —Å—Ç—Ä–∏–º - –æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
                        # self.active_streams.pop(user_id, None)

                        # –û—á–∏—â–∞–µ–º —Å–≤—è–∑–∏ response_id -> user_id –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
                        if internal_response_id:
                            self.response_to_user.pop(internal_response_id, None)
                        if response_id:
                            self.response_to_user.pop(response_id, None)

                        logger.info(f"üîÑ –°—Ç—Ä–∏–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")

                elif not final_text:
                    logger.warning("‚ö†Ô∏è –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –ø—É—Å—Ç–æ–π, –Ω–µ –º–æ–∂–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
                elif not self.active_streams:
                    logger.warning("‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∏–º–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")

            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä set'–∞, —á—Ç–æ–±—ã –Ω–µ —Ä–æ—Å –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ
            if len(self.completed_responses) > 1000:
                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ (–±–µ—Ä–µ–º –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–µ 100)
                old_responses = list(self.completed_responses)[:100]
                for old_response in old_responses:
                    self.completed_responses.discard(old_response)

        elif event_type == "response.function_call_arguments.done":
            # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏
            await self.handle_function_call(event_data)

        elif event_type == "error":
            error = event_data.get("error", {})
            logger.error(f" –û—à–∏–±–∫–∞ –æ—Ç OpenAI: {error}")

    async def handle_function_call(self, event_data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–π."""
        function_name = event_data.get("name")
        arguments_str = event_data.get("arguments", "{}")
        call_id = event_data.get("call_id")

        logger.info(f"üîß –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏: {function_name} —Å call_id: {call_id}")
        logger.info(f"üîß –ê—Ä–≥—É–º–µ–Ω—Ç—ã: {arguments_str}")

        try:
            arguments = json.loads(arguments_str)
        except json.JSONDecodeError as e:
            logger.error(f" –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤: {e}")
            arguments = {}

        # –í—ã–ø–æ–ª–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é
        try:
            if function_name == "get_services":
                result = await self.get_services(arguments.get("category", "–≤—Å–µ"))
            elif function_name == "get_doctors":
                result = await self.get_doctors(arguments.get("specialization", "–≤—Å–µ"))
            elif function_name == "search_appointments":
                result = await self.search_appointments(
                    arguments.get("service"),
                    arguments.get("doctor"),
                    arguments.get("date")
                )
            elif function_name == "book_appointment":
                result = await self.book_appointment(
                    patient_name=arguments.get("patient_name"),
                    phone=arguments.get("phone"),
                    service=arguments.get("service"),
                    doctor=arguments.get("doctor"),
                    datetime_str=arguments.get("datetime", arguments.get("datetime_str")),
                    comment=arguments.get("comment", "")
                )
            else:
                result = {"error": f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: {function_name}"}

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞—Ç–Ω–æ
            await self.send_function_result(call_id, result)
            logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç —Ñ—É–Ω–∫—Ü–∏–∏ {function_name} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ {function_name}: {e}")
            await self.send_function_result(call_id, {"error": str(e)})

    async def send_function_result(self, call_id, result):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ñ—É–Ω–∫—Ü–∏–∏."""
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ñ—É–Ω–∫—Ü–∏–∏
        function_output_event = {
            "type": "conversation.item.create",
            "item": {
                "type": "function_call_output",
                "call_id": call_id,
                "output": json.dumps(result, ensure_ascii=False)
            }
        }
        await self.send_event(function_output_event)

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞
        response_event = {
            "type": "response.create"
        }
        await self.send_event(response_event)
        logger.info(f"üì§ –ó–∞–ø—Ä–æ—Å–∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å–ª–µ function call")

    # –ú–æ–∫–∏ —Ñ—É–Ω–∫—Ü–∏–π —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –∫–ª–∏–Ω–∏–∫–∏
    async def get_services(self, category="–≤—Å–µ"):
        """–ü–æ–ª—É—á–∏—Ç—å —É—Å–ª—É–≥–∏ –∫–ª–∏–Ω–∏–∫–∏ –∏–∑ YClients —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º."""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º YClients –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            yclients_data = await self.yclients.get_services(category)

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è GPT
            services = []
            for service in yclients_data.get("services", []):
                price_from = service.get("price_from", 0)
                price_to = service.get("price_to", price_from)

                if price_to > price_from:
                    price_str = f"–æ—Ç {price_from}‚ÇΩ –¥–æ {price_to}‚ÇΩ"
                else:
                    price_str = f"{price_from}‚ÇΩ" if price_from > 0 else "–ø–æ –∑–∞–ø—Ä–æ—Å—É"

                service_info = {
                    "name": service.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —É—Å–ª—É–≥–∞"),
                    "price": price_str,
                    "duration": f"{service.get('duration', 60)} –º–∏–Ω"
                }

                # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
                if service.get("description"):
                    service_info["description"] = service.get("description")

                services.append(service_info)

            logger.info(f"üìã –ü–æ–ª—É—á–µ–Ω–æ {len(services)} —É—Å–ª—É–≥ —á–µ—Ä–µ–∑ YClients (–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category})")
            return {"services": services}

        except Exception as e:
            logger.error(f" –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Å–ª—É–≥: {e}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ API, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            return {
                "error": True,
                "message": f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥: {str(e)}",
                "services": []
            }

    async def get_doctors(self, specialization="–≤—Å–µ"):
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Ä–∞—á–µ–π –∫–ª–∏–Ω–∏–∫–∏ –∏–∑ YClients."""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º YClients –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            yclients_data = await self.yclients.get_doctors(specialization)

            logger.info(f"üë®‚Äç‚öïÔ∏è –ü–æ–ª—É—á–µ–Ω–æ {len(yclients_data.get('doctors', []))} –≤—Ä–∞—á–µ–π —á–µ—Ä–µ–∑ YClients API")
            return yclients_data

        except Exception as e:
            logger.error(f" –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–∞—á–µ–π –∏–∑ YClients: {e}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ API, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            return {
                "error": True,
                "message": f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Ä–∞—á–µ–π: {str(e)}",
                "doctors": []
            }

    async def search_appointments(self, service, doctor=None, date=None):
        """–ù–∞–π—Ç–∏ —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã —á–µ—Ä–µ–∑ YClients."""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º YClients –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
            yclients_data = await self.yclients.search_appointments(service, doctor, date)

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –Ω–∞—à —Ñ–æ—Ä–º–∞—Ç
            slots = []
            for appointment in yclients_data.get("appointments", []):
                datetime_str = appointment.get("datetime", "")
                try:
                    dt = datetime.strptime(datetime_str, "%Y-%m-%d %H:%M")
                    slots.append({
                        "date": dt.strftime("%d.%m.%Y"),
                        "time": dt.strftime("%H:%M"),
                        "doctor": appointment.get("doctor", "–í—Ä–∞—á"),
                        "available": appointment.get("available", True)
                    })
                except:
                    continue

            logger.info(f"üìÖ –ù–∞–π–¥–µ–Ω–æ {len(slots)} —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ —á–µ—Ä–µ–∑ YClients")
            return {"service": service, "slots": slots}

        except Exception as e:
            logger.error(f" –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å–ª–æ—Ç–æ–≤: {e}")
            raise

    async def book_appointment(self, patient_name, phone, service, doctor, datetime_str, comment=""):
        """–ó–∞–ø–∏—Å–∞—Ç—å –Ω–∞ –ø—Ä–∏–µ–º —á–µ—Ä–µ–∑ YClients."""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º YClients –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
            result = await self.yclients.book_appointment(
                patient_name=patient_name,
                phone=phone,
                service=service,
                doctor=doctor,
                datetime_str=datetime_str,
                comment=comment
            )

            if result.get("success"):
                logger.info(f"–ó–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞ —á–µ—Ä–µ–∑ YClients: {patient_name}")
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å: {result.get('message')}")

            return result

        except Exception as e:
            logger.error(f" –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–∏–µ–º: {e}")
            return {
                "success": False,
                "message": f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏: {str(e)}"
            }

    async def send_user_message(self, user_id, text, message_id):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ OpenAI."""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
            if not self.is_connected or not self.websocket or self.websocket.closed:
                logger.warning("‚ö†Ô∏è WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, –ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è...")
                await self.connect()
            # –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å—Ç—Ä–∏–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
            current_time = asyncio.get_event_loop().time()
            response_id = f"resp_{user_id}_{int(current_time)}"

            if user_id in self.active_streams:
                logger.info(f"üîÑ –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å—Ç—Ä–∏–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å—Ç—Ä–∏–º
                stream_data = self.active_streams[user_id]
                old_response_id = stream_data.get("response_id")

                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Å–≤—è–∑—å response_id -> user_id
                if old_response_id:
                    self.response_to_user.pop(old_response_id, None)

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∏–º —Å –Ω–æ–≤—ã–º response_id
                stream_data.update({
                    "message_id": message_id,
                    "response_id": response_id,
                    "accumulated_text": "",
                    "last_update": current_time,
                    "completed": False,
                    "finalized": False
                })
            else:
                logger.info(f"üÜï –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å—Ç—Ä–∏–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å—Ç—Ä–∏–º
                self.active_streams[user_id] = {
                    "message_id": message_id,
                    "response_id": response_id,
                    "accumulated_text": "",
                    "last_update": current_time,
                    "created_at": current_time,
                    "completed": False,
                    "finalized": False
                }

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—É—é —Å–≤—è–∑—å response_id -> user_id
            self.response_to_user[response_id] = user_id

            logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (response_id: {response_id})")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            create_event = {
                "type": "conversation.item.create",
                "item": {
                    "type": "message",
                    "role": "user",
                    "content": [{"type": "input_text", "text": text}]
                }
            }
            await self.send_event(create_event)
            logger.debug(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ conversation.item.create: {create_event}")

            response_event = {"type": "response.create"}
            await self.send_event(response_event)
            logger.debug(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ response.create: {response_event}")

            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

        except Exception as e:
            logger.error(f" –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            # –û—á–∏—â–∞–µ–º —Å—Ç—Ä–∏–º –ø—Ä–∏ –æ—à–∏–±–∫–µ
            if user_id in self.active_streams:
                del self.active_streams[user_id]
            # –û—á–∏—â–∞–µ–º –≤—Å–µ response_id –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            response_ids_to_remove = [
                rid for rid, uid in self.response_to_user.items()
                if uid == user_id
            ]
            for rid in response_ids_to_remove:
                del self.response_to_user[rid]
            raise

    async def cancel_stream(self, user_id):
        """–û—Ç–º–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç—Ä–∏–º–∞."""
        if user_id in self.active_streams:
            stream_data = self.active_streams[user_id]
            response_id = stream_data.get("response_id")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω –ª–∏ —É–∂–µ response
            if response_id and response_id not in self.completed_responses:
                # Response –µ—â–µ –∞–∫—Ç–∏–≤–µ–Ω, –º–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å
                try:
                    cancel_event = {"type": "response.cancel"}
                    await self.send_event(cancel_event)
                    logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω cancel –¥–ª—è response_id: {response_id}")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ cancel event –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            else:
                if response_id:
                    logger.info(f"‚ÑπÔ∏è Response {response_id} —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω, –æ—Ç–º–µ–Ω–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
                else:
                    logger.warning(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω response_id –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

            # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–∏–º
            del self.active_streams[user_id]

            # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑—å response_id -> user_id (–±–µ–∑–æ–ø–∞—Å–Ω–æ)
            response_ids_to_remove = [
                rid for rid, uid in self.response_to_user.items()
                if uid == user_id
            ]
            for rid in response_ids_to_remove:
                del self.response_to_user[rid]
                # –£–¥–∞–ª—è–µ–º –∏–∑ completed_responses —Ç–æ–∂–µ
                self.completed_responses.discard(rid)

            logger.info(f"üóëÔ∏è –û—á–∏—â–µ–Ω —Å—Ç—Ä–∏–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    async def update_message(self, user_id, text):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∫–æ–¥–µ)."""
        pass

    async def finalize_message(self, user_id, text):
        """–§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è (–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∫–æ–¥–µ)."""
        pass

    async def send_quota_error_message(self, user_id):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –∫–≤–æ—Ç—ã (–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∫–æ–¥–µ)."""
        pass

    async def cleanup_stale_streams(self):
        """–û—á–∏—Å—Ç–∫–∞ –æ—á–µ–Ω—å —Å—Ç–∞—Ä—ã—Ö —Å—Ç—Ä–∏–º–æ–≤ (—Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤)."""
        current_time = asyncio.get_event_loop().time()
        very_old_users = []

        for user_id, stream_data in self.active_streams.items():
            # –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ –æ—á–µ–Ω—å —Å—Ç–∞—Ä—ã–µ —Å—Ç—Ä–∏–º—ã (—Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤ = 86400 —Å–µ–∫—É–Ω–¥)
            created_at = stream_data.get("created_at", current_time)
            age = current_time - created_at

            if age > 86400:  # 24 —á–∞—Å–∞
                very_old_users.append(user_id)
                logger.warning(
                    f"üßπ –û–±–Ω–∞—Ä—É–∂–µ–Ω –æ—á–µ–Ω—å —Å—Ç–∞—Ä—ã–π —Å—Ç—Ä–∏–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (–≤–æ–∑—Ä–∞—Å—Ç: {age / 3600:.1f} —á–∞—Å–æ–≤)")

        # –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ –æ—á–µ–Ω—å —Å—Ç–∞—Ä—ã–µ —Å—Ç—Ä–∏–º—ã
        for user_id in very_old_users:
            try:
                logger.info(f"üóëÔ∏è –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–π —Å—Ç—Ä–∏–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

                # –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ª–æ–≤–∞—Ä–µ–π
                stream_data = self.active_streams.get(user_id, {})
                response_id = stream_data.get("response_id")

                self.active_streams.pop(user_id, None)
                if response_id:
                    self.response_to_user.pop(response_id, None)
                    self.completed_responses.discard(response_id)

                logger.info(f"–û—á–∏—â–µ–Ω —Å—Ç–∞—Ä—ã–π —Å—Ç—Ä–∏–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            except Exception as e:
                logger.error(f" –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—Ç–∞—Ä–æ–≥–æ —Å—Ç—Ä–∏–º–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

        return len(very_old_users)

    def get_stream_stats(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å—Ç—Ä–∏–º–æ–≤ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏."""
        current_time = asyncio.get_event_loop().time()
        stats = {
            "active_streams": len(self.active_streams),
            "response_mappings": len(self.response_to_user),
            "completed_responses": len(self.completed_responses),
            "is_connected": self.is_connected,
            "stream_ages": {},
            "completed_stream_count": 0,
            "total_input_tokens": self.total_input_tokens,
            "total_output_tokens": self.total_output_tokens,
            "total_cost": round(self.total_cost, 4)
        }

        for user_id, stream_data in self.active_streams.items():
            last_update = stream_data.get("last_update", 0)
            age = current_time - last_update if last_update > 0 else 0
            stats["stream_ages"][user_id] = age

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–µ–Ω –ª–∏ response
            response_id = stream_data.get("response_id")
            if response_id and response_id in self.completed_responses:
                stats["completed_stream_count"] += 1

        return stats


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç
dental_client = DentalRealtimeClient()
bot_instance = None


@router.message(CommandStart())
async def start_handler(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start."""
    user_name = message.from_user.first_name if message.from_user else "–ü–∞—Ü–∏–µ–Ω—Ç"

    await message.answer(
        f"ü¶∑ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—é ¬´–ë–µ–ª—ã–µ –∑—É–±—ã¬ª!</b>\n\n"
        f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user_name}! –Ø –≤–∞—à AI-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç.\n\n"
        f"<b>–Ø –ø–æ–º–æ–≥—É –≤–∞–º:</b>\n"
        f"‚Ä¢ üìã –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º –∫ –≤—Ä–∞—á—É\n"
        f"‚Ä¢ üí∞ –£–∑–Ω–∞—Ç—å —Ü–µ–Ω—ã –Ω–∞ —É—Å–ª—É–≥–∏\n"
        f"‚Ä¢ üë®‚Äç‚öïÔ∏è –í—ã–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞\n"
        f"‚Ä¢ üìÖ –ù–∞–π—Ç–∏ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è\n"
        f"‚Ä¢ üè• –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–Ω–∏–∫–µ\n\n"
        f"<i>–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç!</i>\n\n"
        f"<b>–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:</b>\n"
        f"‚Ä¢ \"–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç –ª–µ—á–µ–Ω–∏–µ –∫–∞—Ä–∏–µ—Å–∞?\"\n"
        f"‚Ä¢ \"–•–æ—á—É –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥—É\"\n"
        f"‚Ä¢ \"–ü–æ–∫–∞–∂–∏—Ç–µ –≤–∞—à–∏—Ö –≤—Ä–∞—á–µ–π\"\n"
        f"‚Ä¢ \"–ì–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∫–ª–∏–Ω–∏–∫–∞?\"",
        parse_mode="HTML"
    )


@router.message(F.text)
async def text_handler(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
    if not dental_client.is_connected:
        await message.answer(
            " <b>–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã</b>\n\n"
            "AI-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É:\n"
            "üìû +7 (495) 123-45-67",
            parse_mode="HTML"
        )
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º "–¥—É–º–∞—é..."
    thinking_msg = await message.answer("<i>...</i>", parse_mode="HTML")
    last_sent_text = ""  # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    finalization_lock = asyncio.Lock()  # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–π

    try:
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–ª–ª–±–µ–∫–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
        async def update_message_callback(user_id, text):
            nonlocal last_sent_text
            if text.strip() and text != last_sent_text:
                try:
                    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–µ–∫—Å—Ç –∫–∞–∫ –µ—Å—Ç—å, —É–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –∫—É—Ä—Å–æ—Ä–∞
                    streaming_text = text.replace(" <i>_</i>", "").replace(" <i> </i>", "")
                    # –£–±–∏—Ä–∞–µ–º –æ–¥–∏–Ω–æ—á–Ω—ã–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏ (–∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –∫—É—Ä—Å–æ—Ä–∞)
                    streaming_text = re.sub(r'\s*_\s*$', '', streaming_text)
                    await thinking_msg.edit_text(streaming_text, parse_mode="HTML")
                    last_sent_text = text  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (–±–µ–∑ –∫—É—Ä—Å–æ—Ä–∞)
                    logger.debug(f"üìù –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (–¥–ª–∏–Ω–∞: {len(text)})")
                except Exception as e:
                    error_msg = str(e)
                    if "Flood control exceeded" in error_msg or "Too Many Requests" in error_msg:
                        logger.debug(f"‚è≥ Rate limit –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ")
                    elif "message is not modified" in error_msg:
                        logger.debug(f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                    else:
                        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

        async def finalize_message_callback(user_id, text):
            nonlocal last_sent_text

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–π
            async with finalization_lock:
                try:
                    logger.info(f"–§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–æ –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —Ñ–∏–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ
                    if message.from_user.id in dental_client.active_streams:
                        stream_data = dental_client.active_streams[message.from_user.id]
                        if stream_data.get("finalized", False):
                            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —Ñ–∏–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                            return

                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç –∫–∞–∫ –µ—Å—Ç—å, —É–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –∫—É—Ä—Å–æ—Ä–∞
                    final_text = text.replace(" <i>_</i>", "").replace(" <i> </i>", "").replace("_", "").strip()

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –ª–∏ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ
                    # –∏–ª–∏ –µ—Å–ª–∏ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª–∏–Ω–Ω–µ–µ (–º–æ–≥–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –¥–µ–ª—å—Ç—ã)
                    if final_text != last_sent_text or len(final_text) > len(last_sent_text):
                        await thinking_msg.edit_text(final_text, parse_mode="HTML")
                        last_sent_text = final_text
                        logger.info(
                            f"–§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} (–¥–ª–∏–Ω–∞: {len(final_text)})")
                    else:
                        logger.info(
                            f"–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–¥–µ–Ω—Ç–∏—á–µ–Ω –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–º—É, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

                    # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
                    if message.from_user.id in dental_client.active_streams:
                        stream_data = dental_client.active_streams[message.from_user.id]
                        stream_data["completed"] = True
                        stream_data["finalized"] = True  # –§–ª–∞–≥ —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
                        logger.info(
                            f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}, –∂–¥–µ–º response.done –¥–ª—è –æ—á–∏—Å—Ç–∫–∏")

                except Exception as e:
                    error_msg = str(e)
                    if "Flood control exceeded" in error_msg or "Too Many Requests" in error_msg:
                        logger.warning(f"‚è≥ Rate limit –≤ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–∑–∂–µ")
                        # –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥
                        await asyncio.sleep(5)
                        try:
                            await thinking_msg.edit_text(final_text, parse_mode="HTML")
                            logger.info(f"–§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ—Å–ª–µ –∑–∞–¥–µ—Ä–∂–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                        except Exception as retry_e:
                            logger.error(f" –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {retry_e}")
                    else:
                        logger.error(f" –û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

        # –ö–æ–ª–ª–±–µ–∫ –¥–ª—è –æ—à–∏–±–∫–∏ –∫–≤–æ—Ç—ã
        async def quota_error_callback(user_id):
            try:
                await thinking_msg.edit_text(
                    "üí≥ <b>–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã</b>\n\n"
                    "AI-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–∑-–∑–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ API.\n\n"
                    "üîß <b>–ß—Ç–æ –¥–µ–ª–∞—Ç—å:</b>\n"
                    "‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ —á–µ—Ä–µ–∑ 10-15 –º–∏–Ω—É—Ç\n"
                    "‚Ä¢ –ò–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –Ω–∞–ø—Ä—è–º—É—é –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É:\n\n"
                    "üìû <b>+7 (495) 123-45-67</b>\n\n"
                    "–ò–∑–≤–∏–Ω–∏—Ç–µ –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞! üòî",
                    parse_mode="HTML"
                )
                logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∫–≤–æ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            except Exception as e:
                logger.error(f" –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –∫–≤–æ—Ç—ã: {e}")

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–ª–ª–±–µ–∫–∏ –î–û –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        dental_client.update_message = update_message_callback
        dental_client.finalize_message = finalize_message_callback
        dental_client.send_quota_error_message = quota_error_callback

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ OpenAI
        await dental_client.send_user_message(
            message.from_user.id,
            message.text,
            thinking_msg.message_id
        )

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç - –µ—Å–ª–∏ —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥ –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
        async def timeout_handler():
            user_id = message.from_user.id
            await asyncio.sleep(60)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–∏–º –≤—Å–µ –µ—â–µ –∞–∫—Ç–∏–≤–µ–Ω
            if user_id in dental_client.active_streams:
                stream_data = dental_client.active_streams[user_id]
                response_id = stream_data.get("response_id")
                accumulated_text = stream_data.get("accumulated_text", "")
                completed = stream_data.get("completed", False)

                # –ï—Å–ª–∏ —Å—Ç—Ä–∏–º —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç
                if completed:
                    logger.info(f"‚ÑπÔ∏è –°—Ç—Ä–∏–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω, —Ç–∞–π–º–∞—É—Ç –Ω–µ –Ω—É–∂–µ–Ω")
                    return

                logger.warning(f"‚è∞ –¢–∞–π–º–∞—É—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                logger.info(f"üìù –ù–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: '{accumulated_text[:100]}...'")

                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                stats = dental_client.get_stream_stats()
                logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ç—Ä–∏–º–æ–≤ –ø—Ä–∏ —Ç–∞–π–º–∞—É—Ç–µ: {stats}")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                if accumulated_text.strip():
                    logger.info(f"üí° –ï—Å—Ç—å –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –≤–º–µ—Å—Ç–æ –æ—à–∏–±–∫–∏")
                    try:
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–∞–∫ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç, —É–±–∏—Ä–∞–µ–º –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –∫—É—Ä—Å–æ—Ä–∞
                        final_accumulated_text = accumulated_text.replace(" <i>_</i>", "").replace(" <i> </i>",
                                                                                                   "").replace("_",
                                                                                                               "").strip()
                        await thinking_msg.edit_text(final_accumulated_text, parse_mode="HTML")

                        # –û—á–∏—â–∞–µ–º —Å—Ç—Ä–∏–º
                        await dental_client.cancel_stream(user_id)
                        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                        return

                    except Exception as e:
                        logger.error(f" –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞: {e}")

                try:
                    # –û—Ç–º–µ–Ω—è–µ–º —Å—Ç—Ä–∏–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
                    await dental_client.cancel_stream(user_id)

                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                    await thinking_msg.edit_text(
                        "‚è∞ <b>–ò–∑–≤–∏–Ω–∏—Ç–µ, –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∑–∞–Ω—è–ª–∞ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏</b>\n\n"
                        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø—Ä–æ—â–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É:\n"
                        "üìû +7 (495) 123-45-67",
                        parse_mode="HTML"
                    )

                except Exception as timeout_error:
                    logger.error(f" –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–∞–π–º–∞—É—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {timeout_error}")

        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É —Ç–∞–π–º–∞—É—Ç–∞
        timeout_task = asyncio.create_task(timeout_handler())

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∑–∞–¥–∞—á—É –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–π –æ—Ç–º–µ–Ω—ã
        if hasattr(dental_client.active_streams.get(message.from_user.id, {}), '__dict__'):
            dental_client.active_streams[message.from_user.id]["timeout_task"] = timeout_task

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await thinking_msg.edit_text(
            "üòî <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</b>\n\n"
            "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É:\n"
            "üìû +7 (495) 123-45-67",
            parse_mode="HTML"
        )


def acquire_lock():
    """–ü–æ–ª—É—á–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞."""
    lock_file = "/tmp/dental_bot.lock"
    try:
        lock_fd = open(lock_file, 'w')
        fcntl.lockf(lock_fd, fcntl.LOCK_EX | fcntl.LOCK_NB)
        lock_fd.write(str(os.getpid()))
        lock_fd.flush()
        return lock_fd
    except IOError:
        print(" –û—à–∏–±–∫–∞: –î—Ä—É–≥–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω!")
        print("üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å—ã: ps aux | grep dental_bot")
        sys.exit(1)


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    global bot_instance

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    lock_fd = acquire_lock()
    print("üîí –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞, –∑–∞–ø—É—Å–∫ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞")

    token = os.getenv("TG_BOT_TOKEN") or os.getenv("BOT_TOKEN")
    if not token:
        logger.error(" –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return

    if not os.getenv("OPENAI_API_KEY"):
        logger.error(" OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ OpenAI
    try:
        await dental_client.connect()
    except Exception as e:
        logger.error(f" –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ OpenAI: {e}")
        return

    # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
    bot_instance = Bot(token=token)
    dp = Dispatcher()
    dp.include_router(router)

    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∞–¥–º–∏–Ω-—Å–µ—Ä–≤–µ—Ä
    admin_port = int(os.getenv("ADMIN_PORT", "8080"))
    admin_server = AdminServer(dental_client.yclients, port=admin_port)
    admin_runner = await admin_server.start()

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –æ—á–∏—Å—Ç–∫–∏ –∑–∞–≤–∏—Å—à–∏—Ö —Å—Ç—Ä–∏–º–æ–≤ –∏ –∫–µ—à–∞
    async def cleanup_background_task():
        """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∑–∞–≤–∏—Å—à–∏—Ö —Å—Ç—Ä–∏–º–æ–≤ –∏ –∏—Å—Ç–µ–∫—à–∏—Ö –∑–∞–ø–∏—Å–µ–π –∫–µ—à–∞."""
        while True:
            try:
                await asyncio.sleep(21600)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤

                # –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ –æ—á–µ–Ω—å —Å—Ç–∞—Ä—ã–µ —Å—Ç—Ä–∏–º—ã (—Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤)
                cleaned_count = await dental_client.cleanup_stale_streams()
                if cleaned_count > 0:
                    logger.info(f"üßπ –û—á–∏—â–µ–Ω–æ {cleaned_count} —Å—Ç–∞—Ä—ã—Ö —Å—Ç—Ä–∏–º–æ–≤")

                # –û—á–∏—â–∞–µ–º –∏—Å—Ç–µ–∫—à–∏–µ –∑–∞–ø–∏—Å–∏ –≤—Å–µ—Ö –∫–µ—à–µ–π
                expired_doctors_cache = doctors_cache.cleanup_expired()
                expired_services_cache = services_cache.cleanup_expired()

                total_expired = expired_doctors_cache + expired_services_cache
                if total_expired > 0:
                    logger.info(
                        f"üóëÔ∏è –û—á–∏—â–µ–Ω–æ –∏—Å—Ç–µ–∫—à–∏—Ö –∑–∞–ø–∏—Å–µ–π: –≤—Ä–∞—á–∏={expired_doctors_cache}, —É—Å–ª—É–≥–∏={expired_services_cache}")

                # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                stats = dental_client.get_stream_stats()
                doctors_cache_stats = doctors_cache.get_stats()
                services_cache_stats = services_cache.get_stats()

                logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ç—Ä–∏–º–æ–≤: {stats}")
                logger.info(f"üíæ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–µ—à–∞ –≤—Ä–∞—á–µ–π: {doctors_cache_stats}")
                logger.info(f"üíæ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–µ—à–∞ —É—Å–ª—É–≥: {services_cache_stats}")

            except Exception as e:
                logger.error(f" –û—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ –æ—á–∏—Å—Ç–∫–∏: {e}")
                await asyncio.sleep(60)  # –ü—Ä–∏ –æ—à–∏–±–∫–µ –∂–¥–µ–º –¥–æ–ª—å—à–µ

    cleanup_task = asyncio.create_task(cleanup_background_task())
    logger.info("üßπ –ó–∞–ø—É—â–µ–Ω–∞ —Ñ–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –æ—á–∏—Å—Ç–∫–∏ –∑–∞–≤–∏—Å—à–∏—Ö —Å—Ç—Ä–∏–º–æ–≤")

    logger.info("ü¶∑ –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –∫–ª–∏–Ω–∏–∫–∏...")

    try:
        await dp.start_polling(bot_instance, skip_updates=True)
    except KeyboardInterrupt:
        logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    finally:
        cleanup_task.cancel()
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á")

        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–¥–º–∏–Ω-—Å–µ—Ä–≤–µ—Ä
        if 'admin_runner' in locals():
            await admin_runner.cleanup()
            logger.info("üåê –ê–¥–º–∏–Ω-—Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        final_stats = dental_client.get_stream_stats()
        final_cache_stats = dental_client.yclients.get_all_cache_stats()
        logger.info(f"üìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ç—Ä–∏–º–æ–≤: {final_stats}")
        logger.info(f"üíæ –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–µ—à–µ–π: {final_cache_stats}")
        logger.info(f"üí∞ –û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ —Å–µ—Å—Å–∏—é: ${dental_client.total_cost:.4f}")

        await bot_instance.session.close()
        if dental_client.websocket:
            await dental_client.websocket.close()


if __name__ == "__main__":
    asyncio.run(main())
