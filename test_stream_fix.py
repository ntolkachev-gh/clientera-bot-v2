#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—Ä–∏–º–æ–≤.
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from dental_bot import DentalRealtimeClient
import asyncio


async def test_stream_cleanup():
    """–¢–µ—Å—Ç –æ—á–∏—Å—Ç–∫–∏ —Å—Ç—Ä–∏–º–æ–≤ –∏ response_id."""
    client = DentalRealtimeClient()
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∏–º–∞
    user_id = 12345
    response_id = "resp_12345_123"
    openai_response_id = "resp_CELgRJCVFxPR1BL0SxK8B"
    
    # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∏–º
    client.active_streams[user_id] = {
        "response_id": response_id,
        "openai_response_id": openai_response_id,
        "accumulated_text": "Test text",
        "completed": False,
        "finalized": False,
        "created_at": asyncio.get_event_loop().time()
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–≤—è–∑–∏ response_id -> user_id
    client.response_to_user[response_id] = user_id
    client.response_to_user[openai_response_id] = user_id
    
    print(f"–î–æ –æ—á–∏—Å—Ç–∫–∏:")
    print(f"  active_streams: {list(client.active_streams.keys())}")
    print(f"  response_to_user: {list(client.response_to_user.keys())}")
    print(f"  completed_responses: {len(client.completed_responses)}")
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—Ç–º–µ–Ω—É —Å—Ç—Ä–∏–º–∞
    await client.cancel_stream(user_id)
    
    print(f"\n–ü–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏:")
    print(f"  active_streams: {list(client.active_streams.keys())}")
    print(f"  response_to_user: {list(client.response_to_user.keys())}")
    print(f"  completed_responses: {len(client.completed_responses)}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –æ—á–∏—â–µ–Ω–æ
    assert len(client.active_streams) == 0, "active_streams –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç"
    assert len(client.response_to_user) == 0, "response_to_user –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç"
    assert response_id in client.completed_responses, f"response_id {response_id} –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ completed_responses"
    assert openai_response_id in client.completed_responses, f"openai_response_id {openai_response_id} –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ completed_responses"
    
    print("‚úÖ –¢–µ—Å—Ç –æ—á–∏—Å—Ç–∫–∏ —Å—Ç—Ä–∏–º–æ–≤ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!")


async def test_duplicate_event_handling():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π."""
    client = DentalRealtimeClient()
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º response_id –∫–æ—Ç–æ—Ä—ã–π —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω
    completed_response_id = "resp_CELgRJCVFxPR1BL0SxK8B"
    client.completed_responses.add(completed_response_id)
    
    print(f"–¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –¥–ª—è {completed_response_id}")
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –¥–ª—è —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ response
    delta_event = {
        "type": "response.text.delta",
        "response_id": completed_response_id,
        "delta": "Some text"
    }
    
    done_event = {
        "type": "response.text.done",
        "response_id": completed_response_id,
        "text": "Complete text"
    }
    
    response_done_event = {
        "type": "response.done",
        "response_id": completed_response_id,
        "response": {
            "id": completed_response_id,
            "status": "completed"
        }
    }
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è - –æ–Ω–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω—ã
    await client.handle_event(delta_event)
    await client.handle_event(done_event) 
    await client.handle_event(response_done_event)
    
    print("‚úÖ –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!")


async def test_cleanup_old_responses():
    """–¢–µ—Å—Ç –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö completed_responses."""
    client = DentalRealtimeClient()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –º–Ω–æ–≥–æ completed_responses
    for i in range(1200):
        client.completed_responses.add(f"resp_test_{i}")
    
    print(f"–î–æ –æ—á–∏—Å—Ç–∫–∏: {len(client.completed_responses)} completed_responses")
    
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º –æ—á–∏—Å—Ç–∫—É
    client._last_cleanup = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—á–∏—Å—Ç–∫–∏
    client.cleanup_old_responses()
    
    print(f"–ü–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏: {len(client.completed_responses)} completed_responses")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–º–µ–Ω—å—à–∏–ª–æ—Å—å
    assert len(client.completed_responses) <= 500, "completed_responses –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å <= 500"
    
    print("‚úÖ –¢–µ—Å—Ç –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!")


async def main():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤."""
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Å—Ç—Ä–∏–º–æ–≤...")
    
    await test_stream_cleanup()
    print()
    
    await test_duplicate_event_handling()
    print()
    
    await test_cleanup_old_responses()
    print()
    
    print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")


if __name__ == "__main__":
    asyncio.run(main())
