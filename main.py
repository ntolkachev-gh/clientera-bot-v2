#!/usr/bin/env python3
"""
Telegram-–±–æ—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –¥–ª—è —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –∫–ª–∏–Ω–∏–∫–∏ —Å OpenAI Realtime API.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç src/realtime/client.py –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ—Å–Ω–æ–≤—ã.
"""

import asyncio
import fcntl
import logging
import os
import re
import sys
import time
from datetime import datetime, timedelta
from typing import Dict

from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, F, Router
from aiogram.filters import CommandStart, Command
from aiogram.types import Message
import aiohttp
from aiohttp import web

# –ò–º–ø–æ—Ä—Ç realtime –∫–ª–∏–µ–Ω—Ç–∞ –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π
from src.integrations.yclients_adapter import get_yclients_adapter
from src.realtime.client import get_realtime_client, cleanup_realtime_client

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ TLS –æ—à–∏–±–æ–∫ –≤ aiohttp
class TLSErrorFilter(logging.Filter):
    """–§–∏–ª—å—Ç—Ä –¥–ª—è –ø–æ–¥–∞–≤–ª–µ–Ω–∏—è TLS handshake –æ—à–∏–±–æ–∫."""

    def filter(self, record):
        if "Invalid method encountered" in record.getMessage():
            return False
        if "BadStatusLine" in record.getMessage():
            return False
        return True

# –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –∫ aiohttp –ª–æ–≥–≥–µ—Ä–∞–º
aiohttp_logger = logging.getLogger('aiohttp.server')
aiohttp_logger.addFilter(TLSErrorFilter())
aiohttp_access_logger = logging.getLogger('aiohttp.access')
aiohttp_access_logger.addFilter(TLSErrorFilter())

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä
router = Router()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
realtime_client = None
yclients_adapter = None
bot_instance = None
user_inactivity_timers: Dict[int, asyncio.Task] = {}

# –¢–∞–π–º–∞—É—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (1 —á–∞—Å)
INACTIVITY_TIMEOUT = 3600

# –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞
start_time = time.time()


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–∞–π–º–∞—É—Ç–∞–º–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
async def reset_user_inactivity_timer(user_id: int):
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Ç–∞–π–º–µ—Ä –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    global user_inactivity_timers
    
    # –û—Ç–º–µ–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–∞–π–º–µ—Ä
    if user_id in user_inactivity_timers:
        user_inactivity_timers[user_id].cancel()
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä
    async def timeout_handler():
        try:
            await asyncio.sleep(INACTIVITY_TIMEOUT)
            logger.info(f"‚è∞ –¢–∞–π–º–∞—É—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            # –û—Ç–º–µ–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Å—Ç—Ä–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                user_realtime_client = await get_realtime_client(yclients_adapter, user_id)
                await user_realtime_client.cancel_stream(user_id)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã —Å—Ç—Ä–∏–º–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            
            # –£–¥–∞–ª—è–µ–º —Ç–∞–π–º–µ—Ä
            if user_id in user_inactivity_timers:
                del user_inactivity_timers[user_id]
                
        except asyncio.CancelledError:
            pass
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Ç–∞–π–º–∞—É—Ç–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä
    user_inactivity_timers[user_id] = asyncio.create_task(timeout_handler())
    logger.debug(f"üîÑ –¢–∞–π–º–µ—Ä –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–±—Ä–æ—à–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")


async def cancel_user_inactivity_timer(user_id: int):
    """–û—Ç–º–µ–Ω—è–µ—Ç —Ç–∞–π–º–µ—Ä –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    global user_inactivity_timers
    
    if user_id in user_inactivity_timers:
        user_inactivity_timers[user_id].cancel()
        del user_inactivity_timers[user_id]
        logger.debug(f"‚ùå –¢–∞–π–º–µ—Ä –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –æ—Ç–º–µ–Ω–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")


@router.message(CommandStart())
async def start_handler(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start."""
    user_id = message.from_user.id
    user_name = message.from_user.first_name if message.from_user else "–ü–∞—Ü–∏–µ–Ω—Ç"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        profile_result = await yclients_adapter.get_user_profile(user_id)
        has_profile = profile_result is not None
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        has_profile = False

    # –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ—Ç, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ Telegram
    if not has_profile:
        try:
            telegram_profile = await yclients_adapter.get_telegram_profile(user_id)
            if telegram_profile.get("success"):
                data = telegram_profile["data"]
                telegram_name = data.get("telegram_first_name") or user_name
                logger.info(f"üì± –ü–æ–ª—É—á–µ–Ω Telegram –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è {user_id}: {telegram_name}")
                
                # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –∏–∑ Telegram
                try:
                    await yclients_adapter.get_or_create_user_profile(
                        telegram_id=user_id,
                        name=telegram_name
                    )
                    logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –ø—Ä–æ—Ñ–∏–ª—å –∏–∑ Telegram –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {user_id}")
                except Exception as profile_error:
                    logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –∏–∑ Telegram: {profile_error}")
            else:
                logger.info(f"‚ùå Telegram –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è {user_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è Telegram –ø—Ä–æ—Ñ–∏–ª—è: {e}")

    await message.answer(
        f"ü¶∑ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—é ¬´–ë–µ–ª—ã–µ –∑—É–±—ã¬ª!</b>\n\n"
        f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user_name}! –Ø –≤–∞—à AI-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç.\n\n"
        f"<b>–Ø –ø–æ–º–æ–≥—É –≤–∞–º:</b>\n"
        f"‚Ä¢ üìã –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º –∫ –≤—Ä–∞—á—É\n"
        f"‚Ä¢ üí∞ –£–∑–Ω–∞—Ç—å —Ü–µ–Ω—ã –Ω–∞ —É—Å–ª—É–≥–∏\n"
        f"‚Ä¢ üë®‚Äç‚öïÔ∏è –í—ã–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞\n"
        f"‚Ä¢ üìÖ –ù–∞–π—Ç–∏ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è\n"
        f"‚Ä¢ üè• –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–Ω–∏–∫–µ\n\n"
        f"<i>–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç!</i>\n\n"
        f"<b>–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:</b>\n"
        f"‚Ä¢ \"–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç –ª–µ—á–µ–Ω–∏–µ –∫–∞—Ä–∏–µ—Å–∞?\"\n"
        f"‚Ä¢ \"–•–æ—á—É –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥—É\"\n"
        f"‚Ä¢ \"–ü–æ–∫–∞–∂–∏—Ç–µ –≤–∞—à–∏—Ö –≤—Ä–∞—á–µ–π\"\n"
        f"‚Ä¢ \"–ì–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∫–ª–∏–Ω–∏–∫–∞?\"",
        parse_mode="HTML"
    )


@router.message(F.text)
async def text_handler(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
    user_id = message.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π realtime client –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        realtime_client = await get_realtime_client(yclients_adapter, user_id)
        if not realtime_client.is_connected:
            await message.answer(
                " <b>–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã</b>\n\n"
                "AI-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É:\n"
                "üìû +7 (495) 123-45-67",
                parse_mode="HTML"
            )
            return
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è realtime client –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await message.answer(
            " <b>–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã</b>\n\n"
            "AI-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É:\n"
            "üìû +7 (495) 123-45-67",
            parse_mode="HTML"
        )
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º "–¥—É–º–∞—é..."
    thinking_msg = await message.answer("<i>...</i>", parse_mode="HTML")
    last_sent_text = ""
    last_update_time = 0
    finalization_lock = asyncio.Lock()

    try:
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–ª–ª–±–µ–∫–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å throttling
        async def update_message_callback(user_id, text):
            nonlocal last_sent_text, last_update_time
            
            current_time = time.time()
            
            # Throttling: –æ–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫—Å–∏–º—É–º —Ä–∞–∑ –≤ 500–º—Å –∏–ª–∏ –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏–ª—Å—è
            should_update = (
                current_time - last_update_time > 0.5 or  # –ú–∏–Ω–∏–º—É–º 500–º—Å –º–µ–∂–¥—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏
                len(text) - len(last_sent_text) > 50 or   # –ò–ª–∏ –µ—Å–ª–∏ –¥–æ–±–∞–≤–∏–ª–æ—Å—å –º–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
                text.endswith(('.', '!', '?', '\n')) and not last_sent_text.endswith(('.', '!', '?', '\n'))  # –ò–ª–∏ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
            )
            
            if text.strip() and text != last_sent_text and should_update:
                try:
                    # –£–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –∫—É—Ä—Å–æ—Ä–∞
                    streaming_text = text.replace(" <i>_</i>", "").replace(" <i> </i>", "")
                    streaming_text = re.sub(r'\s*_\s*$', '', streaming_text)
                    await thinking_msg.edit_text(streaming_text, parse_mode="HTML")
                    last_sent_text = text
                    last_update_time = current_time
                    logger.debug(f"üìù –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (–¥–ª–∏–Ω–∞: {len(text)})")
                except Exception as e:
                    error_msg = str(e)
                    if "Flood control exceeded" in error_msg or "Too Many Requests" in error_msg:
                        logger.debug(f"‚è≥ Rate limit –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ")
                        # –ü—Ä–∏ rate limit —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª
                        last_update_time = current_time + 1.0  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                    elif "message is not modified" in error_msg:
                        logger.debug(f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                    else:
                        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            elif text.strip() and text != last_sent_text:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ –æ–±–Ω–æ–≤–ª—è–ª–∏, —á—Ç–æ–±—ã —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–ª–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ
                last_sent_text = text

        async def finalize_message_callback(user_id, text):
            nonlocal last_sent_text

            async with finalization_lock:
                try:
                    logger.info(f"–§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç—Ä–∏–º–∞
                    stream_state = realtime_client.get_stream_state(user_id)
                    if stream_state and stream_state == "done":
                        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —Ñ–∏–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                        return

                    # –£–±–∏—Ä–∞–µ–º –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –∫—É—Ä—Å–æ—Ä–∞
                    final_text = text.replace(" <i>_</i>", "").replace(" <i> </i>", "").replace("_", "").strip()

                    # –í–°–ï–ì–î–ê –æ–±–Ω–æ–≤–ª—è–µ–º –≤ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
                    if final_text.strip():
                        await thinking_msg.edit_text(final_text, parse_mode="HTML")
                        logger.info(f"‚úÖ –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} (–¥–ª–∏–Ω–∞: {len(final_text)})")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —Ç–µ–∫—Å—Ç –æ–±—Ä–µ–∑–∞–Ω –∏–∑-–∑–∞ throttling
                        if len(final_text) > len(last_sent_text) + 10:
                            logger.info(f"üìà –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª–∏–Ω–Ω–µ–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞ {len(final_text) - len(last_sent_text)} —Å–∏–º–≤–æ–ª–æ–≤")
                        
                        last_sent_text = final_text
                    else:
                        logger.warning(f"‚ö†Ô∏è –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –ø—É—Å—Ç–æ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

                except Exception as e:
                    error_msg = str(e)
                    if "Flood control exceeded" in error_msg or "Too Many Requests" in error_msg:
                        logger.warning(f"‚è≥ Rate limit –≤ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                        await asyncio.sleep(5)
                        try:
                            await thinking_msg.edit_text(final_text, parse_mode="HTML")
                            logger.info(f"–§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ—Å–ª–µ –∑–∞–¥–µ—Ä–∂–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                        except Exception as retry_e:
                            logger.error(f"–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {retry_e}")
                    else:
                        logger.error(f"–û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

        # –ö–æ–ª–ª–±–µ–∫ –¥–ª—è –æ—à–∏–±–∫–∏ –∫–≤–æ—Ç—ã
        async def quota_error_callback(user_id):
            try:
                await thinking_msg.edit_text(
                    "üí≥ <b>–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã</b>\n\n"
                    "AI-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–∑-–∑–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ API.\n\n"
                    "üîß <b>–ß—Ç–æ –¥–µ–ª–∞—Ç—å:</b>\n"
                    "‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ —á–µ—Ä–µ–∑ 10-15 –º–∏–Ω—É—Ç\n"
                    "‚Ä¢ –ò–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –Ω–∞–ø—Ä—è–º—É—é –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É:\n\n"
                    "üìû <b>+7 (495) 123-45-67</b>\n\n"
                    "–ò–∑–≤–∏–Ω–∏—Ç–µ –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞! üòî",
                    parse_mode="HTML"
                )
                logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∫–≤–æ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –∫–≤–æ—Ç—ã: {e}")

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        await reset_user_inactivity_timer(user_id)
        
        # –í–ê–ñ–ù–û: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–ª–ª–±–µ–∫–∏ –î–û –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π stream –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–ª–ª–±–µ–∫–∏
        from src.realtime.events import StreamController, StreamState
        
        # –°–æ–∑–¥–∞–µ–º stream –∑–∞—Ä–∞–Ω–µ–µ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–ª–ª–±–µ–∫–∏
        temp_stream = StreamController(
            user_id=user_id,
            message_id=thinking_msg.message_id,
            state=StreamState.IDLE
        )
        realtime_client.active_streams[user_id] = temp_stream
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–ª–ª–±–µ–∫–∏ –¥–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        async def delta_wrapper(delta, accumulated):
            logger.debug(f"üîÑ Delta –¥–ª—è {user_id}: +{len(delta)} —Å–∏–º–≤–æ–ª–æ–≤, –≤—Å–µ–≥–æ: {len(accumulated)}")
            await update_message_callback(user_id, accumulated)
            
        async def done_wrapper(final_text):
            logger.info(f"‚úÖ –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è {user_id}: {len(final_text)} —Å–∏–º–≤–æ–ª–æ–≤")
            await finalize_message_callback(user_id, final_text)
            
        async def error_wrapper(error):
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å—Ç—Ä–∏–º–∞ –¥–ª—è {user_id}: {error}")
            await quota_error_callback(user_id)
        
        realtime_client.set_stream_callbacks(
            user_id,
            on_delta=lambda delta, accumulated: asyncio.create_task(delta_wrapper(delta, accumulated)),
            on_done=lambda final_text: asyncio.create_task(done_wrapper(final_text)),
            on_error=lambda error: asyncio.create_task(error_wrapper(error))
        )
        
        # –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ - –∫–æ–ª–ª–±–µ–∫–∏ —É–∂–µ –≥–æ—Ç–æ–≤—ã
        try:
            # Create conversation item
            create_event = {
                "type": "conversation.item.create",
                "item": {
                    "type": "message",
                    "role": "user",
                    "content": [{"type": "input_text", "text": message.text}]
                }
            }
            await realtime_client._send_event(create_event)
            
            # Create response
            response_event = {"type": "response.create"}
            await realtime_client._send_event(response_event)
            
            logger.info(f"üì§ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –∫–æ–ª–ª–±–µ–∫–∞–º–∏")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            # –û—á–∏—â–∞–µ–º stream –ø—Ä–∏ –æ—à–∏–±–∫–µ
            realtime_client.active_streams.pop(user_id, None)
            raise
        
        logger.info(f"üì§ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ realtime client")

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç - –µ—Å–ª–∏ —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥ –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
        async def timeout_handler():
            user_id = message.from_user.id
            
            # –°–Ω–∞—á–∞–ª–∞ –∂–¥–µ–º 15 —Å–µ–∫—É–Ω–¥ - –µ—Å–ª–∏ –∑–∞ —ç—Ç–æ –≤—Ä–µ–º—è –Ω–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –ø–æ—Å–ª–µ function call
            await asyncio.sleep(15)
            
            stream_controller = realtime_client.active_streams.get(user_id)
            if stream_controller and not stream_controller.accumulated_text.strip():
                # –ï—Å–ª–∏ —á–µ—Ä–µ–∑ 15 —Å–µ–∫—É–Ω–¥ –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞, –≤–æ–∑–º–æ–∂–Ω–æ function call –∑–∞–≤–∏—Å
                logger.warning(f"‚ö†Ô∏è –ß–µ—Ä–µ–∑ 15 —Å–µ–∫—É–Ω–¥ –Ω–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è {user_id}, –ø—Ä–æ–≤–µ—Ä—è–µ–º...")
                logger.info(f"üîç –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç—Ä–∏–º–∞: {stream_controller.state}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–æ –ª–∏ —É–∂–µ –ø–æ–ø—ã—Ç–æ–∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
                retry_count = getattr(stream_controller, 'retry_count', 0)
                if retry_count >= 2:
                    logger.warning(f"‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è {user_id}, –∑–∞–≤–µ—Ä—à–∞–µ–º")
                    await realtime_client.cancel_stream(user_id)
                    return
                
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫
                stream_controller.retry_count = retry_count + 1
                
                # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –æ—Ç–≤–µ—Ç, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
                try:
                    await realtime_client.cancel_stream(user_id)
                    logger.info(f"‚ùå –û—Ç–º–µ–Ω–∏–ª–∏ –∑–∞–≤–∏—Å—à–∏–π –æ—Ç–≤–µ—Ç –¥–ª—è {user_id}")
                    await asyncio.sleep(2)  # –î–∞–µ–º –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –æ—Ç–º–µ–Ω—É
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –æ—Ç–≤–µ—Ç–∞: {e}")
                
                # –ù–ï —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π response –∑–¥–µ—Å—å - –ø—É—Å—Ç—å —Å–∏—Å—Ç–µ–º–∞ —Å–∞–º–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è
                logger.info(f"üîÑ –ñ–¥–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è {user_id} (–ø–æ–ø—ã—Ç–∫–∞ {retry_count + 1}/2)")
            
            # –ó–∞—Ç–µ–º –∂–¥–µ–º –µ—â–µ 45 —Å–µ–∫—É–Ω–¥ (–æ–±—â–∏–π —Ç–∞–π–º–∞—É—Ç 60 —Å–µ–∫—É–Ω–¥)
            await asyncio.sleep(45)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç—Ä–∏–º–∞
            stream_state = realtime_client.get_stream_state(user_id)
            if stream_state:
                # –ï—Å–ª–∏ —Å—Ç—Ä–∏–º —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç
                if stream_state in ["done", "error", "cancelled"]:
                    logger.info(f"‚ÑπÔ∏è –°—Ç—Ä–∏–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω ({stream_state}), —Ç–∞–π–º–∞—É—Ç –Ω–µ –Ω—É–∂–µ–Ω")
                    return

                logger.warning(f"‚è∞ –¢–∞–π–º–∞—É—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

                # –ü–æ–ª—É—á–∞–µ–º stream controller –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ accumulated_text
                stream_controller = realtime_client.active_streams.get(user_id)
                if stream_controller and stream_controller.accumulated_text.strip():
                    logger.info(f"üí° –ï—Å—Ç—å –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –≤–º–µ—Å—Ç–æ –æ—à–∏–±–∫–∏")
                    try:
                        final_accumulated_text = stream_controller.accumulated_text.replace(" <i>_</i>", "").replace(" <i> </i>", "").replace("_", "").strip()
                        await thinking_msg.edit_text(final_accumulated_text, parse_mode="HTML")
                        await realtime_client.cancel_stream(user_id)
                        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                        return
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞: {e}")

                try:
                    await realtime_client.cancel_stream(user_id)
                    await thinking_msg.edit_text(
                        "‚è∞ <b>–ò–∑–≤–∏–Ω–∏—Ç–µ, AI-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç</b>\n\n"
                        "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                        "‚Ä¢ –í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ —Å–µ—Ä–≤–∏—Å\n"
                        "‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å AI\n"
                        "‚Ä¢ –°–ª–æ–∂–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Ç—Ä–µ–±—É–µ—Ç –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏\n\n"
                        "<b>–ß—Ç–æ –¥–µ–ª–∞—Ç—å:</b>\n"
                        "‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø—Ä–æ—â–µ\n"
                        "‚Ä¢ –ò–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –Ω–∞–ø—Ä—è–º—É—é:\n"
                        "üìû +7 (495) 123-45-67",
                        parse_mode="HTML"
                    )
                except Exception as timeout_error:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–∞–π–º–∞—É—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {timeout_error}")

        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É —Ç–∞–π–º–∞—É—Ç–∞
        timeout_task = asyncio.create_task(timeout_handler())
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è "–∑–∞–µ–¥–∞–Ω–∏—è"
        async def periodic_check():
            """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ."""
            nonlocal last_sent_text, last_update_time
            
            for i in range(12):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º 12 —Ä–∞–∑ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º 5 —Å–µ–∫—É–Ω–¥ = 60 —Å–µ–∫—É–Ω–¥
                await asyncio.sleep(5)
                
                stream_controller = realtime_client.active_streams.get(user_id)
                if not stream_controller:
                    break
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞—Å—Ç—Ä—è–ª –ª–∏ function call –±–µ–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
                if (i >= 4 and  # –ü—Ä–æ—à–ª–æ 20+ —Å–µ–∫—É–Ω–¥
                    not stream_controller.accumulated_text.strip() and 
                    stream_controller.state == "idle"):
                    
                    logger.warning(f"üîß Function call –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è, –Ω–æ –Ω–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è {user_id}")
                    logger.info(f"üîç –î–µ—Ç–∞–ª–∏ —Å—Ç—Ä–∏–º–∞: state={stream_controller.state}, text_length={len(stream_controller.accumulated_text)}")
                    
                    try:
                        # –û—Ç–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –æ—Ç–≤–µ—Ç –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤—ã–π
                        cancel_event = {"type": "response.cancel"}
                        await realtime_client._send_event(cancel_event)
                        await asyncio.sleep(0.5)
                        
                        response_event = {"type": "response.create"}
                        await realtime_client._send_event(response_event)
                        logger.info(f"üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è {user_id}")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {e}")
                    
                # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç, –Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–∞–≤–Ω–æ –Ω–µ –æ–±–Ω–æ–≤–ª—è–ª–æ—Å—å
                elif (stream_controller.accumulated_text.strip() and 
                      stream_controller.accumulated_text != last_sent_text and
                      time.time() - last_update_time > 3):  # –ë–æ–ª–µ–µ 3 —Å–µ–∫—É–Ω–¥ –±–µ–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                    
                    logger.info(f"üîß –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è {user_id} (–∑–∞—Å—Ç—Ä—è–ª–æ)")
                    try:
                        clean_text = stream_controller.accumulated_text.replace(" <i>_</i>", "").replace(" <i> </i>", "").strip()
                        await thinking_msg.edit_text(clean_text, parse_mode="HTML")
                        last_sent_text = stream_controller.accumulated_text
                        last_update_time = time.time()
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
                
                # –ï—Å–ª–∏ —Å—Ç—Ä–∏–º –∑–∞–≤–µ—Ä—à–µ–Ω, –≤—ã—Ö–æ–¥–∏–º
                if stream_controller.state in ["done", "error", "cancelled"]:
                    break
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
        periodic_task = asyncio.create_task(periodic_check())

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await thinking_msg.edit_text(
            "üòî <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</b>\n\n"
            "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É:\n"
            "üìû +7 (495) 123-45-67",
            parse_mode="HTML"
        )


def acquire_lock():
    """–ü–æ–ª—É—á–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞."""
    lock_file = "/tmp/dental_bot.lock"
    try:
        lock_fd = open(lock_file, 'w')
        fcntl.lockf(lock_fd, fcntl.LOCK_EX | fcntl.LOCK_NB)
        lock_fd.write(str(os.getpid()))
        lock_fd.flush()
        return lock_fd
    except IOError:
        print("‚ùå –û—à–∏–±–∫–∞: –î—Ä—É–≥–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω!")
        print("üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å—ã: ps aux | grep dental_bot")
        sys.exit(1)


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    global bot_instance, realtime_client, yclients_adapter

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    lock_fd = acquire_lock()
    print("üîí –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞, –∑–∞–ø—É—Å–∫ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞")

    token = os.getenv("TG_BOT_TOKEN") or os.getenv("BOT_TOKEN")
    if not token:
        logger.error("‚ùå –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return

    if not os.getenv("OPENAI_API_KEY"):
        logger.error("‚ùå OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º YClients –∞–¥–∞–ø—Ç–µ—Ä
    yclients_adapter = get_yclients_adapter()
    logger.info("‚úÖ YClients –∞–¥–∞–ø—Ç–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º realtime client manager (—Å–æ–∑–¥–∞–µ—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏)
    logger.info("ü§ñ Realtime client manager –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")

    # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
    bot_instance = Bot(token=token)
    dp = Dispatcher()
    dp.include_router(router)

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è health check
    async def health_check_task():
        """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è realtime clients."""
        while True:
            try:
                await asyncio.sleep(3600)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —á–∞—Å
                
                # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤
                # –Ω–æ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –æ–Ω —Å–∞–º —É–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º–∏
                logger.info("üè• Health check –∑–∞–≤–µ—Ä—à–µ–Ω")
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ health check: {e}")
                await asyncio.sleep(60)

    health_task = asyncio.create_task(health_check_task())
    logger.info("üè• –ó–∞–ø—É—â–µ–Ω–∞ –∑–∞–¥–∞—á–∞ health check")

    # –°–æ–∑–¥–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è health check (–¥–ª—è Railway)
    app = web.Application()
    
    async def health_check_handler(request):
        """Health check endpoint –¥–ª—è Railway."""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç
            me = await bot_instance.get_me()
            return web.json_response({
                "status": "healthy",
                "bot_info": {
                    "id": me.id,
                    "username": me.username,
                    "first_name": me.first_name
                },
                "timestamp": datetime.utcnow().isoformat()
            })
        except Exception as e:
            logger.error(f"Health check failed: {e}")
            return web.json_response({
                "status": "unhealthy",
                "error": str(e),
                "timestamp": datetime.utcnow().isoformat()
            }, status=503)
    
    app.router.add_get('/health', health_check_handler)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä –≤ —Ñ–æ–Ω–µ
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, '0.0.0.0', 8080)
    await site.start()
    logger.info("üåê HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8080 –¥–ª—è health check")

    logger.info("ü¶∑ –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –∫–ª–∏–Ω–∏–∫–∏...")

    try:
        await dp.start_polling(bot_instance, skip_updates=True)
    except KeyboardInterrupt:
        logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    finally:
        health_task.cancel()
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä
        try:
            await site.stop()
            await runner.cleanup()
            logger.info("üõë HTTP —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ HTTP —Å–µ—Ä–≤–µ—Ä–∞: {e}")

        # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ —Ç–∞–π–º–µ—Ä—ã –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        for user_id in list(user_inactivity_timers.keys()):
            await cancel_user_inactivity_timer(user_id)

        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        try:
            from src.realtime.client import _client_manager
            if _client_manager:
                stats = _client_manager.get_stats()
                logger.info(f"üìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ realtime clients: {stats}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        
        if yclients_adapter:
            cache_stats = yclients_adapter.get_all_cache_stats()
            logger.info(f"üíæ –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–µ—à–µ–π: {cache_stats}")

        await bot_instance.session.close()
        
        # –û—á–∏—â–∞–µ–º realtime client
        if realtime_client:
            await cleanup_realtime_client()


if __name__ == "__main__":
    asyncio.run(main())
