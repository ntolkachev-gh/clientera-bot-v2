#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–∏–µ–º.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–∫–∏ 422 –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞.
"""

import asyncio
import logging
import os
import sys
from datetime import datetime, timedelta

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from src.integrations.yclients_adapter import get_yclients_adapter
from src.utils.logger import get_logger

logger = get_logger(__name__)


async def test_existing_client_booking():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø–∏—Å—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ (–æ—à–∏–±–∫–∞ 422)."""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø–∏—Å—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞...")
    
    adapter = get_yclients_adapter()
    
    # –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∞ (–∫–ª–∏–µ–Ω—Ç —Å –Ω–æ–º–µ—Ä–æ–º –∏–∑ –ª–æ–≥–∞)
    test_data = {
        "patient_name": "–û–ª–µ–≥",
        "phone": "+79291284250",
        "service": "–ü–µ—Ä–≤–∏—á–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —ç–Ω–¥–æ–¥–æ–Ω—Ç–∏—Å—Ç–∞", 
        "doctor": "–ú–∞–≥–æ–º–µ–¥ –†–∞—Å—É–ª–æ–≤",
        "datetime": (datetime.now() + timedelta(days=1)).strftime("%Y-%m-%d %H:%M")
    }
    
    try:
        result = await adapter.book_appointment(**test_data)
        
        if result.get('success'):
            logger.info("‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")
            logger.info(f"üìù –î–µ—Ç–∞–ª–∏: {result}")
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏: {result.get('error')}")
            return False
            
    except Exception as e:
        logger.error(f"üí• –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏: {e}")
        return False
    
    return True


async def test_new_client_booking():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø–∏—Å—å –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞."""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø–∏—Å—å –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞...")
    
    adapter = get_yclients_adapter()
    
    # –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∞ (–Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç)
    test_data = {
        "patient_name": "–¢–µ—Å—Ç–æ–≤—ã–π –ü–∞—Ü–∏–µ–Ω—Ç",
        "phone": "+79999999999",  # –ó–∞–≤–µ–¥–æ–º–æ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –Ω–æ–º–µ—Ä
        "service": "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∞-—Ç–µ—Ä–∞–ø–µ–≤—Ç–∞",
        "doctor": "–ú–∞–≥–æ–º–µ–¥ –†–∞—Å—É–ª–æ–≤", 
        "datetime": (datetime.now() + timedelta(days=2)).strftime("%Y-%m-%d %H:%M")
    }
    
    try:
        result = await adapter.book_appointment(**test_data)
        
        if result.get('success'):
            logger.info("‚úÖ –ó–∞–ø–∏—Å—å –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")
            logger.info(f"üìù –î–µ—Ç–∞–ª–∏: {result}")
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞: {result.get('error')}")
            return False
            
    except Exception as e:
        logger.error(f"üí• –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        return False
    
    return True


async def test_client_search():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤."""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤...")
    
    adapter = get_yclients_adapter()
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
        phone = "+79291284250"
        result = await adapter.service.api.find_or_create_client("–û–ª–µ–≥", phone)
        
        if result.get('success'):
            logger.info("‚úÖ –ö–ª–∏–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω!")
            logger.info(f"üì± –î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞: {result['data']}")
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞: {result}")
            return False
            
    except Exception as e:
        logger.error(f"üí• –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        return False
    
    return True


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –∑–∞–ø–∏—Å–∏...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if not os.getenv('YCLIENTS_TOKEN'):
        logger.error("‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω YCLIENTS_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return
        
    if not os.getenv('YCLIENTS_COMPANY_ID'):
        logger.error("‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω YCLIENTS_COMPANY_ID –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return
    
    tests = [
        ("–ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤", test_client_search),
        ("–ó–∞–ø–∏—Å—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞", test_existing_client_booking),
        ("–ó–∞–ø–∏—Å—å –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞", test_new_client_booking),
    ]
    
    results = []
    
    for test_name, test_func in tests:
        logger.info(f"\n{'='*50}")
        logger.info(f"üß™ –¢–µ—Å—Ç: {test_name}")
        logger.info(f"{'='*50}")
        
        try:
            success = await test_func()
            results.append((test_name, success))
            
            if success:
                logger.info(f"‚úÖ {test_name}: –£–°–ü–ï–®–ù–û")
            else:
                logger.error(f"‚ùå {test_name}: –ù–ï–£–î–ê–ß–ù–û")
                
        except Exception as e:
            logger.error(f"üí• {test_name}: –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï - {e}")
            results.append((test_name, False))
        
        # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
        await asyncio.sleep(1)
    
    # –ò—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    logger.info(f"\n{'='*50}")
    logger.info("üìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´")
    logger.info(f"{'='*50}")
    
    passed = 0
    total = len(results)
    
    for test_name, success in results:
        status = "‚úÖ –£–°–ü–ï–®–ù–û" if success else "‚ùå –ù–ï–£–î–ê–ß–ù–û"
        logger.info(f"{status}: {test_name}")
        if success:
            passed += 1
    
    logger.info(f"\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
    
    if passed == total:
        logger.info("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
    else:
        logger.warning(f"‚ö†Ô∏è {total - passed} —Ç–µ—Å—Ç–æ–≤ –Ω–µ –ø—Ä–æ—à–ª–∏")


if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    
    asyncio.run(main())
