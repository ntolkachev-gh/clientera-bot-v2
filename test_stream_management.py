#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∏–º–∞–º–∏ –≤ dental_bot.
"""

import asyncio
import logging
import time
from dental_bot import DentalRealtimeClient

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

async def test_stream_management():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∏–º–∞–º–∏."""
    client = DentalRealtimeClient()
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ OpenAI
        logger.info("üîå –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ OpenAI Realtime API...")
        await client.connect()
        await asyncio.sleep(1)
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        test_users = [
            (1001, "–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫–∏–µ —É—Å–ª—É–≥–∏ –≤—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç–µ?", 1),
            (1002, "–•–æ—á—É –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º", 2),
            (1001, "–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è?", 3),  # –¢–æ—Ç –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        ]
        
        for user_id, message, msg_id in test_users:
            logger.info(f"\n{'='*60}")
            logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: '{message}'")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ –æ—Ç–ø—Ä–∞–≤–∫–∏
            stats_before = client.get_stream_stats()
            logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –î–û –æ—Ç–ø—Ä–∞–≤–∫–∏:")
            logger.info(f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∏–º–æ–≤: {stats_before['active_streams']}")
            logger.info(f"   –ù–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö: {stats_before['uncompleted_stream_count']}")
            logger.info(f"   –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö: {stats_before['completed_stream_count']}")
            
            if stats_before['stream_details']:
                logger.info("   –î–µ—Ç–∞–ª–∏ —Å—Ç—Ä–∏–º–æ–≤:")
                for uid, details in stats_before['stream_details'].items():
                    logger.info(f"     User {uid}: age_created={details['age_created']}s, "
                              f"completed={details['completed']}, "
                              f"has_response_id={details['has_openai_response_id']}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await client.send_user_message(user_id, message, msg_id)
            
            # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            await asyncio.sleep(3)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
            stats_after = client.get_stream_stats()
            logger.info(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ü–û–°–õ–ï –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏ –æ–∂–∏–¥–∞–Ω–∏—è:")
            logger.info(f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∏–º–æ–≤: {stats_after['active_streams']}")
            logger.info(f"   –ù–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö: {stats_after['uncompleted_stream_count']}")
            logger.info(f"   –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö: {stats_after['completed_stream_count']}")
            
            if stats_after['stream_details']:
                logger.info("   –î–µ—Ç–∞–ª–∏ —Å—Ç—Ä–∏–º–æ–≤:")
                for uid, details in stats_after['stream_details'].items():
                    logger.info(f"     User {uid}: age_created={details['age_created']}s, "
                              f"completed={details['completed']}, "
                              f"has_response_id={details['has_openai_response_id']}, "
                              f"response_id={details['openai_response_id']}, "
                              f"text_len={details['text_length']}")
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        await asyncio.sleep(5)
        final_stats = client.get_stream_stats()
        logger.info(f"\n{'='*60}")
        logger.info("üìä –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        logger.info(f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∏–º–æ–≤: {final_stats['active_streams']}")
        logger.info(f"   –ù–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö: {final_stats['uncompleted_stream_count']}")
        logger.info(f"   –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö: {final_stats['completed_stream_count']}")
        logger.info(f"   –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${final_stats['total_cost']}")
        
        if final_stats['stream_details']:
            logger.info("\n   –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—Ä–∏–º–∞—Ö:")
            for uid, details in final_stats['stream_details'].items():
                logger.info(f"   User {uid}:")
                logger.info(f"     - –í–æ–∑—Ä–∞—Å—Ç —Å—Ç—Ä–∏–º–∞: {details['age_created']}s")
                logger.info(f"     - –ó–∞–≤–µ—Ä—à–µ–Ω: {details['completed']}")
                logger.info(f"     - –§–∏–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {details['finalized']}")
                logger.info(f"     - OpenAI Response ID: {details['openai_response_id']}")
                logger.info(f"     - –î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: {details['text_length']} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –¢–µ—Å—Ç –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö —Å—Ç—Ä–∏–º–æ–≤
        logger.info(f"\n{'='*60}")
        logger.info("üßπ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—á–∏—Å—Ç–∫—É —Å—Ç–∞—Ä—ã—Ö —Å—Ç—Ä–∏–º–æ–≤...")
        cleaned = await client.cleanup_stale_streams()
        logger.info(f"   –û—á–∏—â–µ–Ω–æ —Å—Ç—Ä–∏–º–æ–≤: {cleaned}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {e}", exc_info=True)
    
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        if client.websocket:
            await client.websocket.close()
        logger.info("\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")

if __name__ == "__main__":
    asyncio.run(test_stream_management())
