#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ fallback –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª–æ—Ç–æ–≤
"""

import asyncio
import os
from dotenv import load_dotenv
from src.integrations.yclients_adapter import YClientsAdapter

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env
load_dotenv()

async def test_slots_fallback():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å–ª–æ—Ç–æ–≤ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤"""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º fallback –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å–ª–æ—Ç–æ–≤...")
    
    # –°–æ–∑–¥–∞–µ–º –∞–¥–∞–ø—Ç–µ—Ä
    adapter = YClientsAdapter()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å–ª–æ—Ç–æ–≤
    test_date = "2025-09-11"
    doctor_id = 123
    service_id = 456
    doctor_name = "–¢–µ—Å—Ç–æ–≤—ã–π –≤—Ä–∞—á"
    
    print(f"üìÖ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª–æ—Ç—ã –Ω–∞ {test_date}")
    print(f"üë®‚Äç‚öïÔ∏è –í—Ä–∞—á: {doctor_name} (ID: {doctor_id})")
    print(f"ü¶∑ –£—Å–ª—É–≥–∞ ID: {service_id}")
    print(f"‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {adapter.work_start_hour}:00-{adapter.work_end_hour}:00")
    print(f"‚è±Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª: {adapter.slot_interval_minutes} –º–∏–Ω—É—Ç")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª–æ—Ç—ã
    slots = adapter._generate_day_slots(test_date, doctor_id, service_id, doctor_name)
    
    print(f"\n‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(slots)} —Å–ª–æ—Ç–æ–≤:")
    print("-" * 50)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 —Å–ª–æ—Ç–æ–≤
    for i, slot in enumerate(slots[:10]):
        print(f"{i+1:2d}. {slot['time']} - {slot['doctor']} (ID: {slot['doctor_id']})")
    
    if len(slots) > 10:
        print(f"... –∏ –µ—â–µ {len(slots) - 10} —Å–ª–æ—Ç–æ–≤")
    
    print("-" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–ª–æ—Ç–æ–≤
    if slots:
        sample_slot = slots[0]
        required_fields = ['datetime', 'date', 'time', 'doctor', 'doctor_id', 'service_id', 'available', 'generated']
        
        print("\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–ª–æ—Ç–æ–≤:")
        for field in required_fields:
            if field in sample_slot:
                print(f"  ‚úÖ {field}: {sample_slot[field]}")
            else:
                print(f"  ‚ùå {field}: –û–¢–°–£–¢–°–¢–í–£–ï–¢")
    
    print(f"\nüéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(slots)} —Å–ª–æ—Ç–æ–≤")

async def test_different_configurations():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã"""
    
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    
    configurations = [
        {"start": 9, "end": 18, "interval": 30, "name": "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∫–ª–∏–Ω–∏–∫–∞"},
        {"start": 8, "end": 20, "interval": 15, "name": "–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫"},
        {"start": 10, "end": 16, "interval": 60, "name": "–ö–æ—Ä–æ—Ç–∫–∏–π –¥–µ–Ω—å"},
    ]
    
    for config in configurations:
        print(f"\nüìã {config['name']}: {config['start']}:00-{config['end']}:00, –∏–Ω—Ç–µ—Ä–≤–∞–ª {config['interval']}–º–∏–Ω")
        
        # –í—Ä–µ–º–µ–Ω–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        os.environ['CLINIC_START_HOUR'] = str(config['start'])
        os.environ['CLINIC_END_HOUR'] = str(config['end'])
        os.environ['SLOT_INTERVAL_MINUTES'] = str(config['interval'])
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∞–¥–∞–ø—Ç–µ—Ä —Å –Ω–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
        adapter = YClientsAdapter()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª–æ—Ç—ã
        slots = adapter._generate_day_slots("2025-09-11", 123, 456, "–¢–µ—Å—Ç–æ–≤—ã–π –≤—Ä–∞—á")
        
        print(f"  üìä –°–ª–æ—Ç–æ–≤: {len(slots)}")
        print(f"  ‚è∞ –ü–µ—Ä–≤—ã–π —Å–ª–æ—Ç: {slots[0]['time'] if slots else '–ù–µ—Ç'}")
        print(f"  ‚è∞ –ü–æ—Å–ª–µ–¥–Ω–∏–π —Å–ª–æ—Ç: {slots[-1]['time'] if slots else '–ù–µ—Ç'}")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        await test_slots_fallback()
        await test_different_configurations()
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")

if __name__ == "__main__":
    asyncio.run(main())
